
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00802000  000008a8  0000093c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b1  008020c2  008020c2  000009fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004289  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002be8  00000000  00000000  00004e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c26  00000000  00000000  000079e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00008610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025a9  00000000  00000000  0000888c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000551  00000000  00000000  0000ae35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000b386  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 04 02 	jmp	0x408	; 0x408 <__ctors_end>
   4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
   8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
   c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  10:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  14:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  18:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  1c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  20:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  24:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  28:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  2c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  30:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  34:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  38:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_14>
  3c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  40:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  44:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  48:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  4c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  50:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_20>
  54:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  58:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  5c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  60:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_24>
  64:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  68:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  6c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  70:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  74:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  78:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  7c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  80:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  84:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  88:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  8c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  90:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  94:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  98:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  9c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  a0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  a4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  a8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  ac:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  b0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  b4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  b8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  bc:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  c0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  c4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  c8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  cc:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  d0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  d4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  d8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  dc:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  e0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  e4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  e8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  ec:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  f0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  f4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  f8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
  fc:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 100:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 104:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 108:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 10c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 110:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 114:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 118:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 11c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 120:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 124:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 128:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 12c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 130:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 134:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 138:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 13c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 140:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 144:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 148:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 14c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 150:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 154:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 158:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 15c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 160:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 164:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 168:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 16c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 170:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 174:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 178:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 17c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 180:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 184:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 188:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 18c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 190:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 194:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 198:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 19c:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1a0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1a4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1a8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1ac:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1b0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1b4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1b8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1bc:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1c0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1c4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1c8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1cc:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1d0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1d4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1d8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1dc:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1e0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1e4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1e8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1ec:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1f0:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1f4:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>
 1f8:	0c 94 23 02 	jmp	0x446	; 0x446 <__bad_interrupt>

000001fc <CharacterOmega>:
 1fc:	9c a2 c1 01 01 c1 a2 9c 00 00 00 00                 ............

00000208 <BrightnessLookUpTable>:
 208:	00 00 00 00 00 00 01 00 01 00 02 00 03 00 04 00     ................
 218:	05 00 06 00 07 00 09 00 0a 00 0c 00 0e 00 10 00     ................
 228:	12 00 14 00 16 00 19 00 1b 00 1e 00 21 00 24 00     ............!.$.
 238:	27 00 2a 00 2d 00 31 00 34 00 38 00 3c 00 40 00     '.*.-.1.4.8.<.@.
 248:	44 00 48 00 4d 00 51 00 56 00 5a 00 5f 00 64 00     D.H.M.Q.V.Z._.d.
 258:	69 00 6f 00 74 00 79 00 7f 00 85 00 8b 00 91 00     i.o.t.y.........
 268:	97 00 9d 00 a3 00 aa 00 b0 00 b7 00 be 00 c5 00     ................
 278:	cc 00 d3 00 db 00 e2 00 ea 00 f2 00 fa 00 02 01     ................
 288:	0a 01 12 01 1a 01 23 01 2b 01 34 01 3d 01 46 01     ......#.+.4.=.F.
 298:	4f 01 58 01 62 01 6b 01 75 01 7f 01 89 01 93 01     O.X.b.k.u.......
 2a8:	9d 01 a7 01 b2 01 bc 01 c7 01 d1 01 dc 01 e7 01     ................
 2b8:	f3 01 fe 01 09 02 15 02 20 02 2c 02 38 02 44 02     ........ .,.8.D.
 2c8:	50 02 5d 02 69 02 76 02 82 02 8f 02 9c 02 a9 02     P.].i.v.........
 2d8:	b6 02 c3 02 d1 02 de 02 ec 02 fa 02 08 03 16 03     ................
 2e8:	24 03 32 03 41 03 4f 03 5e 03 6d 03 7c 03 8b 03     $.2.A.O.^.m.|...
 2f8:	9a 03 a9 03 b9 03 c8 03 d8 03 e8 03 f8 03 08 04     ................
 308:	18 04 28 04 39 04 49 04 5a 04 6b 04 7c 04 8d 04     ..(.9.I.Z.k.|...
 318:	9e 04 af 04 c1 04 d2 04 e4 04 f6 04 08 05 1a 05     ................
 328:	2c 05 3e 05 51 05 63 05 76 05 89 05 9c 05 af 05     ,.>.Q.c.v.......
 338:	c2 05 d6 05 e9 05 fd 05 10 06 24 06 38 06 4c 06     ..........$.8.L.
 348:	61 06 75 06 89 06 9e 06 b3 06 c8 06 dd 06 f2 06     a.u.............
 358:	07 07 1c 07 32 07 47 07 5d 07 73 07 89 07 9f 07     ....2.G.].s.....
 368:	b5 07 cc 07 e2 07 f9 07 0f 08 26 08 3d 08 54 08     ..........&.=.T.
 378:	6c 08 83 08 9b 08 b2 08 ca 08 e2 08 fa 08 12 09     l...............
 388:	2a 09 43 09 5b 09 74 09 8c 09 a5 09 be 09 d8 09     *.C.[.t.........
 398:	f1 09 0a 0a 24 0a 3d 0a 57 0a 71 0a 8b 0a a5 0a     ....$.=.W.q.....
 3a8:	bf 0a da 0a f4 0a 0f 0b 2a 0b 45 0b 60 0b 7b 0b     ........*.E.`.{.
 3b8:	96 0b b2 0b cd 0b e9 0b 04 0c 20 0c 3c 0c 59 0c     .......... .<.Y.
 3c8:	75 0c 91 0c ae 0c ca 0c e7 0c 04 0d 21 0d 3e 0d     u...........!.>.
 3d8:	5c 0d 79 0d 97 0d b4 0d d2 0d f0 0d 0e 0e 2c 0e     \.y...........,.
 3e8:	4b 0e 69 0e 88 0e a6 0e c5 0e e4 0e 03 0f 22 0f     K.i...........".
 3f8:	42 0f 61 0f 81 0f a0 0f c0 0f e0 0f ff 0f ff 0f     B.a.............

00000408 <__ctors_end>:
 408:	11 24       	eor	r1, r1
 40a:	1f be       	out	0x3f, r1	; 63
 40c:	cf ef       	ldi	r28, 0xFF	; 255
 40e:	cd bf       	out	0x3d, r28	; 61
 410:	df e2       	ldi	r29, 0x2F	; 47
 412:	de bf       	out	0x3e, r29	; 62

00000414 <__do_copy_data>:
 414:	10 e2       	ldi	r17, 0x20	; 32
 416:	a0 e0       	ldi	r26, 0x00	; 0
 418:	b0 e2       	ldi	r27, 0x20	; 32
 41a:	e8 ea       	ldi	r30, 0xA8	; 168
 41c:	f8 e0       	ldi	r31, 0x08	; 8
 41e:	00 e0       	ldi	r16, 0x00	; 0
 420:	0b bf       	out	0x3b, r16	; 59
 422:	02 c0       	rjmp	.+4      	; 0x428 <__do_copy_data+0x14>
 424:	07 90       	elpm	r0, Z+
 426:	0d 92       	st	X+, r0
 428:	a2 3c       	cpi	r26, 0xC2	; 194
 42a:	b1 07       	cpc	r27, r17
 42c:	d9 f7       	brne	.-10     	; 0x424 <__do_copy_data+0x10>

0000042e <__do_clear_bss>:
 42e:	21 e2       	ldi	r18, 0x21	; 33
 430:	a2 ec       	ldi	r26, 0xC2	; 194
 432:	b0 e2       	ldi	r27, 0x20	; 32
 434:	01 c0       	rjmp	.+2      	; 0x438 <.do_clear_bss_start>

00000436 <.do_clear_bss_loop>:
 436:	1d 92       	st	X+, r1

00000438 <.do_clear_bss_start>:
 438:	a3 37       	cpi	r26, 0x73	; 115
 43a:	b2 07       	cpc	r27, r18
 43c:	e1 f7       	brne	.-8      	; 0x436 <.do_clear_bss_loop>
 43e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
 442:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <_exit>

00000446 <__bad_interrupt>:
 446:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000044a <Display_setChannelBrightness>:
	{0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111}
};


void Display_setChannelBrightness(uint8_t row, uint8_t channel, uint8_t brightness){
	DisplayData[row][channel] = brightness;
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	fc 01       	movw	r30, r24
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	e8 0f       	add	r30, r24
 454:	f9 1f       	adc	r31, r25
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	e0 50       	subi	r30, 0x00	; 0
 464:	f0 4e       	sbci	r31, 0xE0	; 224
 466:	e6 0f       	add	r30, r22
 468:	f1 1d       	adc	r31, r1
 46a:	40 83       	st	Z, r20
 46c:	08 95       	ret

0000046e <Display_getChannelBrightness>:
}

uint8_t Display_getChannelBrightness(uint8_t row, uint8_t channel){
	return DisplayData[row][channel];
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	e8 0f       	add	r30, r24
 478:	f9 1f       	adc	r31, r25
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	e0 50       	subi	r30, 0x00	; 0
 488:	f0 4e       	sbci	r31, 0xE0	; 224
 48a:	e6 0f       	add	r30, r22
 48c:	f1 1d       	adc	r31, r1
}
 48e:	80 81       	ld	r24, Z
 490:	08 95       	ret

00000492 <Display_clear>:

void Display_clear(void){
 492:	e0 e0       	ldi	r30, 0x00	; 0
 494:	f0 e2       	ldi	r31, 0x20	; 32
 496:	20 ec       	ldi	r18, 0xC0	; 192
 498:	30 e2       	ldi	r19, 0x20	; 32
 49a:	08 c0       	rjmp	.+16     	; 0x4ac <Display_clear+0x1a>
	for(uint8_t i = 0; i < 8; ++i){
		for(uint8_t j = 0; j < 24; ++j){
			DisplayData[i][j] = 0;
 49c:	11 92       	st	Z+, r1
	return DisplayData[row][channel];
}

void Display_clear(void){
	for(uint8_t i = 0; i < 8; ++i){
		for(uint8_t j = 0; j < 24; ++j){
 49e:	e8 17       	cp	r30, r24
 4a0:	f9 07       	cpc	r31, r25
 4a2:	e1 f7       	brne	.-8      	; 0x49c <Display_clear+0xa>
 4a4:	fc 01       	movw	r30, r24
uint8_t Display_getChannelBrightness(uint8_t row, uint8_t channel){
	return DisplayData[row][channel];
}

void Display_clear(void){
	for(uint8_t i = 0; i < 8; ++i){
 4a6:	28 17       	cp	r18, r24
 4a8:	39 07       	cpc	r19, r25
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <Display_clear+0x20>
 4ac:	cf 01       	movw	r24, r30
 4ae:	48 96       	adiw	r24, 0x18	; 24
 4b0:	f5 cf       	rjmp	.-22     	; 0x49c <Display_clear+0xa>
 4b2:	08 95       	ret

000004b4 <clock_init>:
		
	}
}

void clock_init(){
	OSC.CTRL |= OSC_RC32MEN_bm;
 4b4:	e0 e5       	ldi	r30, 0x50	; 80
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 4be:	81 81       	ldd	r24, Z+1	; 0x01
 4c0:	81 ff       	sbrs	r24, 1
 4c2:	fd cf       	rjmp	.-6      	; 0x4be <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC32M_gc);
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	88 ed       	ldi	r24, 0xD8	; 216
 4c8:	84 bf       	out	0x34, r24	; 52
 4ca:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 4ce:	08 95       	ret

000004d0 <main>:

void clock_init(void);

int main(void)
{
	clock_init();
 4d0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <clock_init>
	SPI_init();
 4d4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SPI_init>
	Timer0_init();
 4d8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Timer0_init>
	Timer1_init();
 4dc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Timer1_init>
	
	
	
	PORTA.DIRSET = 0b11111111; //ROW2
 4e0:	e0 e0       	ldi	r30, 0x00	; 0
 4e2:	f6 e0       	ldi	r31, 0x06	; 6
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0b00000000; //ROW2
 4e8:	15 82       	std	Z+5, r1	; 0x05
	SPIC.DATA = 0; //Used to trigger the SPI interrupts
 4ea:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	
	sei(); //activate global interrupts
 4ee:	78 94       	sei
	PMIC.CTRL |= 7; //all interrupt levels are enabled
 4f0:	e0 ea       	ldi	r30, 0xA0	; 160
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	82 81       	ldd	r24, Z+2	; 0x02
 4f6:	87 60       	ori	r24, 0x07	; 7
 4f8:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	87 ea       	ldi	r24, 0xA7	; 167
 4fe:	91 e6       	ldi	r25, 0x61	; 97
 500:	21 50       	subi	r18, 0x01	; 1
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <main+0x30>
 508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x3a>
 50a:	00 00       	nop
	
	_delay_ms(1000);
	
	Print_character();
 50c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Print_character>
 510:	ff cf       	rjmp	.-2      	; 0x510 <main+0x40>

00000512 <Print_changeColor>:
	print_textBuffer[i] = 0;
}

void Print_changeColor( void )
{
		if(print_CharacterRedVal == 255){
 512:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <__data_end>
 516:	8f 3f       	cpi	r24, 0xFF	; 255
 518:	29 f4       	brne	.+10     	; 0x524 <Print_changeColor+0x12>
			print_CharacterGreenVal = 255;
 51a:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <print_CharacterGreenVal>
			print_CharacterRedVal = 0;
 51e:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <__data_end>
 522:	08 95       	ret
		}
		else if(print_CharacterGreenVal == 255){
 524:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <print_CharacterGreenVal>
 528:	8f 3f       	cpi	r24, 0xFF	; 255
 52a:	29 f4       	brne	.+10     	; 0x536 <Print_changeColor+0x24>
			print_CharacterBlueVal = 255;
 52c:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <print_CharacterBlueVal>
			print_CharacterGreenVal = 0;
 530:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <print_CharacterGreenVal>
 534:	08 95       	ret
		}
		else if(print_CharacterBlueVal == 255){
 536:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <print_CharacterBlueVal>
 53a:	8f 3f       	cpi	r24, 0xFF	; 255
 53c:	21 f4       	brne	.+8      	; 0x546 <Print_changeColor+0x34>
			print_CharacterRedVal = 255;
 53e:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <__data_end>
			print_CharacterBlueVal = 0;
 542:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <print_CharacterBlueVal>
 546:	08 95       	ret

00000548 <Print_outputBuffer>:
	
}


void Print_outputBuffer(void)
{
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	0f 2e       	mov	r0, r31
 556:	fb ec       	ldi	r31, 0xCB	; 203
 558:	ef 2e       	mov	r14, r31
 55a:	f0 e2       	ldi	r31, 0x20	; 32
 55c:	ff 2e       	mov	r15, r31
 55e:	f0 2d       	mov	r31, r0
	uint8_t rowCounter = 0;
	for ( uint8_t i = 0 ; i < 8 ; ++i)
 560:	00 e0       	ldi	r16, 0x00	; 0
 562:	2a c0       	rjmp	.+84     	; 0x5b8 <Print_outputBuffer+0x70>
	{
		for ( uint8_t j = 0 ; j < 8 ; ++j)
		{
			if ( print_textBuffer[i] & ( 1 << j ) )
 564:	f7 01       	movw	r30, r14
 566:	80 81       	ld	r24, Z
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0c 2e       	mov	r0, r28
 56c:	02 c0       	rjmp	.+4      	; 0x572 <Print_outputBuffer+0x2a>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	0a 94       	dec	r0
 574:	e2 f7       	brpl	.-8      	; 0x56e <Print_outputBuffer+0x26>
 576:	80 ff       	sbrs	r24, 0
 578:	14 c0       	rjmp	.+40     	; 0x5a2 <Print_outputBuffer+0x5a>
			{
				Display_setChannelBrightness(rowCounter,	j*3,		print_CharacterRedVal);
 57a:	40 91 c2 20 	lds	r20, 0x20C2	; 0x8020c2 <__data_end>
 57e:	61 2f       	mov	r22, r17
 580:	80 2f       	mov	r24, r16
 582:	0e 94 25 02 	call	0x44a	; 0x44a <Display_setChannelBrightness>
				Display_setChannelBrightness(rowCounter,	j*3 + 1,	print_CharacterGreenVal);
 586:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <print_CharacterGreenVal>
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	61 0f       	add	r22, r17
 58e:	80 2f       	mov	r24, r16
 590:	0e 94 25 02 	call	0x44a	; 0x44a <Display_setChannelBrightness>
				Display_setChannelBrightness(rowCounter,	j*3 + 2,	print_CharacterBlueVal);
 594:	40 91 c3 20 	lds	r20, 0x20C3	; 0x8020c3 <print_CharacterBlueVal>
 598:	62 e0       	ldi	r22, 0x02	; 2
 59a:	61 0f       	add	r22, r17
 59c:	80 2f       	mov	r24, r16
 59e:	0e 94 25 02 	call	0x44a	; 0x44a <Display_setChannelBrightness>
 5a2:	21 96       	adiw	r28, 0x01	; 1
 5a4:	1d 5f       	subi	r17, 0xFD	; 253
void Print_outputBuffer(void)
{
	uint8_t rowCounter = 0;
	for ( uint8_t i = 0 ; i < 8 ; ++i)
	{
		for ( uint8_t j = 0 ; j < 8 ; ++j)
 5a6:	c8 30       	cpi	r28, 0x08	; 8
 5a8:	d1 05       	cpc	r29, r1
 5aa:	e1 f6       	brne	.-72     	; 0x564 <Print_outputBuffer+0x1c>


void Print_outputBuffer(void)
{
	uint8_t rowCounter = 0;
	for ( uint8_t i = 0 ; i < 8 ; ++i)
 5ac:	0f 5f       	subi	r16, 0xFF	; 255
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	e2 1a       	sub	r14, r18
 5b2:	f2 0a       	sbc	r15, r18
 5b4:	08 30       	cpi	r16, 0x08	; 8
 5b6:	21 f0       	breq	.+8      	; 0x5c0 <Print_outputBuffer+0x78>
	
}


void Print_outputBuffer(void)
{
 5b8:	10 e0       	ldi	r17, 0x00	; 0
 5ba:	c0 e0       	ldi	r28, 0x00	; 0
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
 5be:	d2 cf       	rjmp	.-92     	; 0x564 <Print_outputBuffer+0x1c>
				Display_setChannelBrightness(rowCounter,	j*3 + 2,	print_CharacterBlueVal);
			}
		}
		rowCounter++;
	}
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	08 95       	ret

000005ce <Print_character>:




void Print_character(void)
{
 5ce:	ec ef       	ldi	r30, 0xFC	; 252
 5d0:	f1 e0       	ldi	r31, 0x01	; 1
 5d2:	ab ec       	ldi	r26, 0xCB	; 203
 5d4:	b0 e2       	ldi	r27, 0x20	; 32
 5d6:	23 ed       	ldi	r18, 0xD3	; 211
 5d8:	30 e2       	ldi	r19, 0x20	; 32
	uint8_t counter = 0;
	for ( uint8_t i = 0; i < 8 ; ++i)
	{
		print_textBuffer[i] = pgm_read_byte ( & ( CharacterOmega[counter++] ) );
 5da:	84 91       	lpm	r24, Z
 5dc:	8d 93       	st	X+, r24
 5de:	31 96       	adiw	r30, 0x01	; 1


void Print_character(void)
{
	uint8_t counter = 0;
	for ( uint8_t i = 0; i < 8 ; ++i)
 5e0:	a2 17       	cp	r26, r18
 5e2:	b3 07       	cpc	r27, r19
 5e4:	d1 f7       	brne	.-12     	; 0x5da <Print_character+0xc>
	{
		print_textBuffer[i] = pgm_read_byte ( & ( CharacterOmega[counter++] ) );
	}
	//TODO : Find a sensible way to introduce a new character to an established string...
 5e6:	08 95       	ret

000005e8 <SPI_init>:
#include "Display.h"
#include "ProgmemData.h"


void SPI_init(void){
	PORTC.DIRSET |= 1 << 0; //Latch pin for TLC5947
 5e8:	e0 e4       	ldi	r30, 0x40	; 64
 5ea:	f6 e0       	ldi	r31, 0x06	; 6
 5ec:	81 81       	ldd	r24, Z+1	; 0x01
 5ee:	81 60       	ori	r24, 0x01	; 1
 5f0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 5f2:	81 81       	ldd	r24, Z+1	; 0x01
 5f4:	82 60       	ori	r24, 0x02	; 2
 5f6:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 7; //SCK pin for TLC5947
 5f8:	81 81       	ldd	r24, Z+1	; 0x01
 5fa:	80 68       	ori	r24, 0x80	; 128
 5fc:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 5fe:	81 81       	ldd	r24, Z+1	; 0x01
 600:	80 62       	ori	r24, 0x20	; 32
 602:	81 83       	std	Z+1, r24	; 0x01


	PORTC.PIN4CTRL |= PORT_OPC_PULLUP_gc;
 604:	84 89       	ldd	r24, Z+20	; 0x14
 606:	88 61       	ori	r24, 0x18	; 24
 608:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.DIRSET |= 1 << 4; //Slave select
 60a:	81 81       	ldd	r24, Z+1	; 0x01
 60c:	80 61       	ori	r24, 0x10	; 16
 60e:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= 1 << 4; //Slave select HIGH
 610:	85 81       	ldd	r24, Z+5	; 0x05
 612:	80 61       	ori	r24, 0x10	; 16
 614:	85 83       	std	Z+5, r24	; 0x05
	

	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV128_gc | SPI_CLK2X_bm;
 616:	a0 ec       	ldi	r26, 0xC0	; 192
 618:	b8 e0       	ldi	r27, 0x08	; 8
 61a:	8c 91       	ld	r24, X
 61c:	83 6d       	ori	r24, 0xD3	; 211
 61e:	8c 93       	st	X, r24
	SPIC.INTCTRL |= SPI_INTLVL_LO_gc;
 620:	11 96       	adiw	r26, 0x01	; 1
 622:	8c 91       	ld	r24, X
 624:	11 97       	sbiw	r26, 0x01	; 1
 626:	81 60       	ori	r24, 0x01	; 1
 628:	11 96       	adiw	r26, 0x01	; 1
 62a:	8c 93       	st	X, r24
	
	PORTC.OUTCLR |= 1 << 0;
 62c:	86 81       	ldd	r24, Z+6	; 0x06
 62e:	81 60       	ori	r24, 0x01	; 1
 630:	86 83       	std	Z+6, r24	; 0x06
 632:	08 95       	ret

00000634 <SPI_update>:
}

void SPI_update(void){
	SPIC.INTCTRL |= SPI_INTLVL_MED_gc; // interrupt level for SPIC set to medium
 634:	e0 ec       	ldi	r30, 0xC0	; 192
 636:	f8 e0       	ldi	r31, 0x08	; 8
 638:	81 81       	ldd	r24, Z+1	; 0x01
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	81 83       	std	Z+1, r24	; 0x01
 63e:	08 95       	ret

00000640 <SPI_blankAndLatch>:
}

void SPI_blankAndLatch(void){
	PORTC.OUTSET |= 1 << 0 | 1<<1;
 640:	e0 e4       	ldi	r30, 0x40	; 64
 642:	f6 e0       	ldi	r31, 0x06	; 6
 644:	85 81       	ldd	r24, Z+5	; 0x05
 646:	83 60       	ori	r24, 0x03	; 3
 648:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR |= 1 << 0;
 64a:	86 81       	ldd	r24, Z+6	; 0x06
 64c:	81 60       	ori	r24, 0x01	; 1
 64e:	86 83       	std	Z+6, r24	; 0x06
 650:	08 95       	ret

00000652 <__vector_24>:
}

ISR ( SPIC_INT_vect )
{
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	0b b6       	in	r0, 0x3b	; 59
 65e:	0f 92       	push	r0
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	4f 93       	push	r20
 666:	5f 93       	push	r21
 668:	6f 93       	push	r22
 66a:	7f 93       	push	r23
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	bf 93       	push	r27
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
	The data is sent in batches of two 12bits variables, divided into three 8bits variables. ( 12*2 == 8*3 )
	The sending of the two 12bits variables are divided into three actions, each one choosing the appropriate bits
	to put into the 8bit variable c, which is transmitted once the switch ends.
*/
	
	switch ( _8bytesSent % 3 )			
 678:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <_8bytesSent.4616>
 67c:	8b ea       	ldi	r24, 0xAB	; 171
 67e:	98 9f       	mul	r25, r24
 680:	81 2d       	mov	r24, r1
 682:	11 24       	eor	r1, r1
 684:	86 95       	lsr	r24
 686:	28 2f       	mov	r18, r24
 688:	22 0f       	add	r18, r18
 68a:	82 0f       	add	r24, r18
 68c:	98 1b       	sub	r25, r24
 68e:	91 30       	cpi	r25, 0x01	; 1
 690:	01 f1       	breq	.+64     	; 0x6d2 <__vector_24+0x80>
 692:	20 f0       	brcs	.+8      	; 0x69c <__vector_24+0x4a>
 694:	92 30       	cpi	r25, 0x02	; 2
 696:	09 f4       	brne	.+2      	; 0x69a <__vector_24+0x48>
 698:	3a c0       	rjmp	.+116    	; 0x70e <__vector_24+0xbc>
 69a:	41 c0       	rjmp	.+130    	; 0x71e <__vector_24+0xcc>
	{
		case ( 0 ):
			first12Bits = pgm_read_word(  & (  BrightnessLookUpTable[Display_getChannelBrightness(row,23-_12bytesSent)] ) );
 69c:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <_12bytesSent.4615>
 6a0:	67 e1       	ldi	r22, 0x17	; 23
 6a2:	68 1b       	sub	r22, r24
 6a4:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <row.4617>
 6a8:	0e 94 37 02 	call	0x46e	; 0x46e <Display_getChannelBrightness>
 6ac:	e8 2f       	mov	r30, r24
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	e8 5f       	subi	r30, 0xF8	; 248
 6b6:	fd 4f       	sbci	r31, 0xFD	; 253
 6b8:	85 91       	lpm	r24, Z+
 6ba:	94 91       	lpm	r25, Z
 6bc:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <first12Bits.4618>
 6c0:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <first12Bits.4618+0x1>
			c = ( uint8_t ) (first12Bits >> 4);
 6c4:	92 95       	swap	r25
 6c6:	82 95       	swap	r24
 6c8:	8f 70       	andi	r24, 0x0F	; 15
 6ca:	89 27       	eor	r24, r25
 6cc:	9f 70       	andi	r25, 0x0F	; 15
 6ce:	89 27       	eor	r24, r25
			
			break;
 6d0:	27 c0       	rjmp	.+78     	; 0x720 <__vector_24+0xce>

		case( 1 ):
			++_12bytesSent;
 6d2:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <_12bytesSent.4615>
 6d6:	8f 5f       	subi	r24, 0xFF	; 255
 6d8:	80 93 c9 20 	sts	0x20C9, r24	; 0x8020c9 <_12bytesSent.4615>
			second12Bits = pgm_read_word(  & (   BrightnessLookUpTable[Display_getChannelBrightness(row,23-_12bytesSent)]) );
 6dc:	67 e1       	ldi	r22, 0x17	; 23
 6de:	68 1b       	sub	r22, r24
 6e0:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <row.4617>
 6e4:	0e 94 37 02 	call	0x46e	; 0x46e <Display_getChannelBrightness>
 6e8:	e8 2f       	mov	r30, r24
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	ee 0f       	add	r30, r30
 6ee:	ff 1f       	adc	r31, r31
 6f0:	e8 5f       	subi	r30, 0xF8	; 248
 6f2:	fd 4f       	sbci	r31, 0xFD	; 253
 6f4:	85 91       	lpm	r24, Z+
 6f6:	94 91       	lpm	r25, Z
 6f8:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <second12Bits.4619>
 6fc:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <second12Bits.4619+0x1>
			c = (uint8_t) ( first12Bits << 4 );
 700:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <first12Bits.4618>
 704:	82 95       	swap	r24
 706:	80 7f       	andi	r24, 0xF0	; 240
			MSB_filter_var = ((uint8_t) ( second12Bits >> 8 ))  & 0x0F;
			c |= MSB_filter_var;
 708:	9f 70       	andi	r25, 0x0F	; 15
 70a:	89 2b       	or	r24, r25

			break;
 70c:	09 c0       	rjmp	.+18     	; 0x720 <__vector_24+0xce>
			
		case( 2 ):
		
			c = (uint8_t) second12Bits;
 70e:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <second12Bits.4619>
			_12bytesSent++;
 712:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <_12bytesSent.4615>
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <_12bytesSent.4615>
			break;	
 71c:	01 c0       	rjmp	.+2      	; 0x720 <__vector_24+0xce>
	static uint8_t		row				= 0;
	
	static uint16_t		first12Bits		= 0;
	static uint16_t		second12Bits	= 0;
	
	uint8_t				c				= 0;
 71e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		
		}
		
		SPIC.DATA = c;                  // send data
 720:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
		_8bytesSent++;
 724:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <_8bytesSent.4616>
 728:	8f 5f       	subi	r24, 0xFF	; 255
 72a:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <_8bytesSent.4616>
		
		if ( _12bytesSent >= 24  || _8bytesSent >= 36 )					// if reached end
 72e:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <_12bytesSent.4615>
 732:	98 31       	cpi	r25, 0x18	; 24
 734:	10 f4       	brcc	.+4      	; 0x73a <__vector_24+0xe8>
 736:	84 32       	cpi	r24, 0x24	; 36
 738:	c8 f1       	brcs	.+114    	; 0x7ac <__vector_24+0x15a>
		{
			while(!(SPIC_STATUS & SPI_IF_bm)){}
 73a:	e2 ec       	ldi	r30, 0xC2	; 194
 73c:	f8 e0       	ldi	r31, 0x08	; 8
 73e:	80 81       	ld	r24, Z
 740:	88 23       	and	r24, r24
 742:	ec f7       	brge	.-6      	; 0x73e <__vector_24+0xec>
			SPI_blankAndLatch();
 744:	0e 94 20 03 	call	0x640	; 0x640 <SPI_blankAndLatch>
			
			SPIC.INTCTRL	&=		~( ( 1 << 0 ) | ( 1 << 1 ) );		// turn off interrupts
 748:	e0 ec       	ldi	r30, 0xC0	; 192
 74a:	f8 e0       	ldi	r31, 0x08	; 8
 74c:	81 81       	ldd	r24, Z+1	; 0x01
 74e:	8c 7f       	andi	r24, 0xFC	; 252
 750:	81 83       	std	Z+1, r24	; 0x01
			_12bytesSent	=		0;
 752:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <_12bytesSent.4615>
			_8bytesSent		=		0;
 756:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <_8bytesSent.4616>
			
			if(row > 7){
 75a:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <row.4617>
 75e:	88 30       	cpi	r24, 0x08	; 8
 760:	30 f0       	brcs	.+12     	; 0x76e <__vector_24+0x11c>
				row = 0;
 762:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <row.4617>
				PORTA.OUT = (1<<0);
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 76c:	19 c0       	rjmp	.+50     	; 0x7a0 <__vector_24+0x14e>
			}
			else if (row == 0) PORTA.OUT = (1<<0);
 76e:	81 11       	cpse	r24, r1
 770:	04 c0       	rjmp	.+8      	; 0x77a <__vector_24+0x128>
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 778:	13 c0       	rjmp	.+38     	; 0x7a0 <__vector_24+0x14e>
			else PORTA.OUT= PORTA.OUT << 1;
 77a:	e0 e0       	ldi	r30, 0x00	; 0
 77c:	f6 e0       	ldi	r31, 0x06	; 6
 77e:	94 81       	ldd	r25, Z+4	; 0x04
 780:	99 0f       	add	r25, r25
 782:	94 83       	std	Z+4, r25	; 0x04
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 784:	8f 5f       	subi	r24, 0xFF	; 255
			if(row == 8)
 786:	88 30       	cpi	r24, 0x08	; 8
 788:	19 f0       	breq	.+6      	; 0x790 <__vector_24+0x13e>
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 78a:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <row.4617>
 78e:	02 c0       	rjmp	.+4      	; 0x794 <__vector_24+0x142>
			if(row == 8)
				row = 0;
 790:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <row.4617>
			PORTC.OUTCLR |= 1<<1;	
 794:	e0 e4       	ldi	r30, 0x40	; 64
 796:	f6 e0       	ldi	r31, 0x06	; 6
 798:	86 81       	ldd	r24, Z+6	; 0x06
 79a:	82 60       	ori	r24, 0x02	; 2
 79c:	86 83       	std	Z+6, r24	; 0x06
		}	
}
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <__vector_24+0x15a>
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 7a0:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <row.4617>
 7a4:	8f 5f       	subi	r24, 0xFF	; 255
 7a6:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <row.4617>
 7aa:	f4 cf       	rjmp	.-24     	; 0x794 <__vector_24+0x142>
			if(row == 8)
				row = 0;
			PORTC.OUTCLR |= 1<<1;	
		}	
}
 7ac:	ff 91       	pop	r31
 7ae:	ef 91       	pop	r30
 7b0:	bf 91       	pop	r27
 7b2:	af 91       	pop	r26
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	7f 91       	pop	r23
 7ba:	6f 91       	pop	r22
 7bc:	5f 91       	pop	r21
 7be:	4f 91       	pop	r20
 7c0:	3f 91       	pop	r19
 7c2:	2f 91       	pop	r18
 7c4:	0f 90       	pop	r0
 7c6:	0b be       	out	0x3b, r0	; 59
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <Timer0_init>:
#include "Display.h"
#include "Print.h"

void Timer0_init(void)
{
	TCC0.CTRLA = 0b00000011; //PRESCALER CLK_DIV4
 7d2:	e0 e0       	ldi	r30, 0x00	; 0
 7d4:	f8 e0       	ldi	r31, 0x08	; 8
 7d6:	83 e0       	ldi	r24, 0x03	; 3
 7d8:	80 83       	st	Z, r24
	TCC0.INTCTRLA = 0b00000011; //Interrupt level HIGH
 7da:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 5000;
 7dc:	88 e8       	ldi	r24, 0x88	; 136
 7de:	93 e1       	ldi	r25, 0x13	; 19
 7e0:	86 a3       	std	Z+38, r24	; 0x26
 7e2:	97 a3       	std	Z+39, r25	; 0x27
 7e4:	08 95       	ret

000007e6 <Timer1_init>:
}
/*		Timer 0 is used for the periodic update of the Display		*/

void Timer1_init(void)
{
	TCC1.CTRLA = 0b00000111; //PRESCALER CLK_DIV1024
 7e6:	e0 e4       	ldi	r30, 0x40	; 64
 7e8:	f8 e0       	ldi	r31, 0x08	; 8
 7ea:	87 e0       	ldi	r24, 0x07	; 7
 7ec:	80 83       	st	Z, r24
	TCC1.INTCTRLA = 0b00000001; //Interrupt level LOW
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	86 83       	std	Z+6, r24	; 0x06
	TCC1.PER = 10000;
 7f2:	80 e1       	ldi	r24, 0x10	; 16
 7f4:	97 e2       	ldi	r25, 0x27	; 39
 7f6:	86 a3       	std	Z+38, r24	; 0x26
 7f8:	97 a3       	std	Z+39, r25	; 0x27
 7fa:	08 95       	ret

000007fc <__vector_14>:
}
/*		Timer 1		*/

ISR ( TCC0_OVF_vect )
{
 7fc:	1f 92       	push	r1
 7fe:	0f 92       	push	r0
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	0f 92       	push	r0
 804:	11 24       	eor	r1, r1
 806:	0b b6       	in	r0, 0x3b	; 59
 808:	0f 92       	push	r0
 80a:	2f 93       	push	r18
 80c:	3f 93       	push	r19
 80e:	4f 93       	push	r20
 810:	5f 93       	push	r21
 812:	6f 93       	push	r22
 814:	7f 93       	push	r23
 816:	8f 93       	push	r24
 818:	9f 93       	push	r25
 81a:	af 93       	push	r26
 81c:	bf 93       	push	r27
 81e:	ef 93       	push	r30
 820:	ff 93       	push	r31
	SPI_update();
 822:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_update>
}
 826:	ff 91       	pop	r31
 828:	ef 91       	pop	r30
 82a:	bf 91       	pop	r27
 82c:	af 91       	pop	r26
 82e:	9f 91       	pop	r25
 830:	8f 91       	pop	r24
 832:	7f 91       	pop	r23
 834:	6f 91       	pop	r22
 836:	5f 91       	pop	r21
 838:	4f 91       	pop	r20
 83a:	3f 91       	pop	r19
 83c:	2f 91       	pop	r18
 83e:	0f 90       	pop	r0
 840:	0b be       	out	0x3b, r0	; 59
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <__vector_20>:

ISR ( TCC1_OVF_vect )
{
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	0b b6       	in	r0, 0x3b	; 59
 858:	0f 92       	push	r0
 85a:	2f 93       	push	r18
 85c:	3f 93       	push	r19
 85e:	4f 93       	push	r20
 860:	5f 93       	push	r21
 862:	6f 93       	push	r22
 864:	7f 93       	push	r23
 866:	8f 93       	push	r24
 868:	9f 93       	push	r25
 86a:	af 93       	push	r26
 86c:	bf 93       	push	r27
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
	Print_changeColor();
 872:	0e 94 89 02 	call	0x512	; 0x512 <Print_changeColor>
	Display_clear();
 876:	0e 94 49 02 	call	0x492	; 0x492 <Display_clear>
	Print_outputBuffer();
 87a:	0e 94 a4 02 	call	0x548	; 0x548 <Print_outputBuffer>
	
}
 87e:	ff 91       	pop	r31
 880:	ef 91       	pop	r30
 882:	bf 91       	pop	r27
 884:	af 91       	pop	r26
 886:	9f 91       	pop	r25
 888:	8f 91       	pop	r24
 88a:	7f 91       	pop	r23
 88c:	6f 91       	pop	r22
 88e:	5f 91       	pop	r21
 890:	4f 91       	pop	r20
 892:	3f 91       	pop	r19
 894:	2f 91       	pop	r18
 896:	0f 90       	pop	r0
 898:	0b be       	out	0x3b, r0	; 59
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <_exit>:
 8a4:	f8 94       	cli

000008a6 <__stop_program>:
 8a6:	ff cf       	rjmp	.-2      	; 0x8a6 <__stop_program>
