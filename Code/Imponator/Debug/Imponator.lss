
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802000  00802000  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003818  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002953  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000875  00000000  00000000  0000677f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00006ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023a0  00000000  00000000  00007144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025a  00000000  00000000  000094e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000973e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
   8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
   c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  2c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  34:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  38:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_14>
  3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  50:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  54:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  60:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_24>
  64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  70:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  74:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  78:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  7c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  80:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  84:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  88:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  8c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  90:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  94:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  98:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  9c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  ac:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  bc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  cc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  dc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  ec:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  fc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 100:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 104:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 108:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 10c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 110:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 114:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 118:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 11c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 120:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 124:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 128:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 12c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 130:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 134:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 138:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 13c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 140:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 144:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 148:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 14c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 150:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 154:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 158:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 15c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 160:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 164:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 168:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 16c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 170:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 174:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 178:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 17c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 180:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 184:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 188:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 18c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 190:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 194:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 198:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 19c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1ac:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1bc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1cc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1dc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1ec:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e6 ea       	ldi	r30, 0xA6	; 166
 210:	f4 e0       	ldi	r31, 0x04	; 4
 212:	00 e0       	ldi	r16, 0x00	; 0
 214:	0b bf       	out	0x3b, r16	; 59
 216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
 218:	07 90       	elpm	r0, Z+
 21a:	0d 92       	st	X+, r0
 21c:	a0 30       	cpi	r26, 0x00	; 0
 21e:	b1 07       	cpc	r27, r17
 220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
 222:	20 e2       	ldi	r18, 0x20	; 32
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	b0 e2       	ldi	r27, 0x20	; 32
 228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
 22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
 22c:	a7 30       	cpi	r26, 0x07	; 7
 22e:	b2 07       	cpc	r27, r18
 230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
 232:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
 236:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

0000023a <__bad_interrupt>:
 23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <clock_init>:
		_delay_us(50);*/
    }
}

void clock_init(){
	OSC.CTRL |= OSC_RC32MEN_bm;
 23e:	e0 e5       	ldi	r30, 0x50	; 80
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	81 ff       	sbrs	r24, 1
 24c:	fd cf       	rjmp	.-6      	; 0x248 <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC32M_gc);
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	88 ed       	ldi	r24, 0xD8	; 216
 252:	84 bf       	out	0x34, r24	; 52
 254:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 258:	08 95       	ret

0000025a <main>:

void clock_init(void);

int main(void)
{
	clock_init();
 25a:	0e 94 1f 01 	call	0x23e	; 0x23e <clock_init>
	SPI_init();
 25e:	0e 94 41 01 	call	0x282	; 0x282 <SPI_init>
	Timer0_init();
 262:	0e 94 1f 02 	call	0x43e	; 0x43e <Timer0_init>
	
	
	
	
	PORTA.DIRSET = 0b11111111; //ROW2
 266:	e0 e0       	ldi	r30, 0x00	; 0
 268:	f6 e0       	ldi	r31, 0x06	; 6
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0b00000000; //ROW2
 26e:	15 82       	std	Z+5, r1	; 0x05
	SPIC.DATA = 0b11111111;
 270:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	
	sei();
 274:	78 94       	sei
	PMIC.CTRL |= 7; //all interrupt levels are enabled
 276:	e0 ea       	ldi	r30, 0xA0	; 160
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	82 81       	ldd	r24, Z+2	; 0x02
 27c:	87 60       	ori	r24, 0x07	; 7
 27e:	82 83       	std	Z+2, r24	; 0x02
 280:	ff cf       	rjmp	.-2      	; 0x280 <main+0x26>

00000282 <SPI_init>:
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};


void SPI_init(void){
	PORTC.DIRSET |= 1 << 0; //Latch pin for TLC5947
 282:	e0 e4       	ldi	r30, 0x40	; 64
 284:	f6 e0       	ldi	r31, 0x06	; 6
 286:	81 81       	ldd	r24, Z+1	; 0x01
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 7; //SCK pin for TLC5947
 292:	81 81       	ldd	r24, Z+1	; 0x01
 294:	80 68       	ori	r24, 0x80	; 128
 296:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 298:	81 81       	ldd	r24, Z+1	; 0x01
 29a:	80 62       	ori	r24, 0x20	; 32
 29c:	81 83       	std	Z+1, r24	; 0x01


	PORTC.PIN4CTRL |= PORT_OPC_PULLUP_gc;
 29e:	84 89       	ldd	r24, Z+20	; 0x14
 2a0:	88 61       	ori	r24, 0x18	; 24
 2a2:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.DIRSET |= 1 << 4; //Slave select
 2a4:	81 81       	ldd	r24, Z+1	; 0x01
 2a6:	80 61       	ori	r24, 0x10	; 16
 2a8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= 1 << 4; //Slave select HIGH
 2aa:	85 81       	ldd	r24, Z+5	; 0x05
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	85 83       	std	Z+5, r24	; 0x05
	

	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV128_gc | SPI_CLK2X_bm;
 2b0:	a0 ec       	ldi	r26, 0xC0	; 192
 2b2:	b8 e0       	ldi	r27, 0x08	; 8
 2b4:	8c 91       	ld	r24, X
 2b6:	83 6d       	ori	r24, 0xD3	; 211
 2b8:	8c 93       	st	X, r24
	SPIC.INTCTRL |= SPI_INTLVL_LO_gc;
 2ba:	11 96       	adiw	r26, 0x01	; 1
 2bc:	8c 91       	ld	r24, X
 2be:	11 97       	sbiw	r26, 0x01	; 1
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	11 96       	adiw	r26, 0x01	; 1
 2c4:	8c 93       	st	X, r24
	//SPIC.INTCTRL |= SPI_INTLVL_OFF_gc;
	
	PORTC.OUTCLR |= 1 << 0;
 2c6:	86 81       	ldd	r24, Z+6	; 0x06
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	86 83       	std	Z+6, r24	; 0x06
 2cc:	08 95       	ret

000002ce <SPI_update>:
}

void SPI_update(void){
	SPIC.INTCTRL |= SPI_INTLVL_MED_gc; // interrupt level for SPIC set to medium
 2ce:	e0 ec       	ldi	r30, 0xC0	; 192
 2d0:	f8 e0       	ldi	r31, 0x08	; 8
 2d2:	81 81       	ldd	r24, Z+1	; 0x01
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	81 83       	std	Z+1, r24	; 0x01
 2d8:	08 95       	ret

000002da <SPI_blankAndLatch>:
}

void SPI_blankAndLatch(void){
	PORTC.OUTSET |= 1 << 0 | 1<<1;
 2da:	e0 e4       	ldi	r30, 0x40	; 64
 2dc:	f6 e0       	ldi	r31, 0x06	; 6
 2de:	85 81       	ldd	r24, Z+5	; 0x05
 2e0:	83 60       	ori	r24, 0x03	; 3
 2e2:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR |= 1 << 0 | 1<<1;
 2e4:	86 81       	ldd	r24, Z+6	; 0x06
 2e6:	83 60       	ori	r24, 0x03	; 3
 2e8:	86 83       	std	Z+6, r24	; 0x06
 2ea:	08 95       	ret

000002ec <__vector_24>:
}

ISR ( SPIC_INT_vect )
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	0b b6       	in	r0, 0x3b	; 59
 2f8:	0f 92       	push	r0
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	cf 93       	push	r28
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	The data is sent in batches of two 12bits variables, divided into three 8bits variables. ( 12*2 == 8*3 )
	The sending of the two 12bits variables are divied into three actions, each one choosing the appropriate bits
	to put into the 8bit variable c, which is transmitted once the switch ends.
*/
	
	switch ( _8bytesSent % 3 )			
 314:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <_8bytesSent.4607>
 318:	8b ea       	ldi	r24, 0xAB	; 171
 31a:	98 9f       	mul	r25, r24
 31c:	81 2d       	mov	r24, r1
 31e:	11 24       	eor	r1, r1
 320:	86 95       	lsr	r24
 322:	28 2f       	mov	r18, r24
 324:	22 0f       	add	r18, r18
 326:	82 0f       	add	r24, r18
 328:	29 2f       	mov	r18, r25
 32a:	28 1b       	sub	r18, r24
 32c:	21 30       	cpi	r18, 0x01	; 1
 32e:	f1 f0       	breq	.+60     	; 0x36c <__vector_24+0x80>
 330:	18 f0       	brcs	.+6      	; 0x338 <__vector_24+0x4c>
 332:	22 30       	cpi	r18, 0x02	; 2
 334:	c9 f1       	breq	.+114    	; 0x3a8 <__vector_24+0xbc>
 336:	40 c0       	rjmp	.+128    	; 0x3b8 <__vector_24+0xcc>
	{
		case ( 0 ):
			if(row == 0)
 338:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <row.4608>
 33c:	81 11       	cpse	r24, r1
 33e:	07 c0       	rjmp	.+14     	; 0x34e <__vector_24+0x62>
				first12Bits = 0b1111111111111111;
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	3f ef       	ldi	r19, 0xFF	; 255
 344:	20 93 03 20 	sts	0x2003, r18	; 0x802003 <first12Bits.4609>
 348:	30 93 04 20 	sts	0x2004, r19	; 0x802004 <first12Bits.4609+0x1>
 34c:	04 c0       	rjmp	.+8      	; 0x356 <__vector_24+0x6a>
			else first12Bits = 0;
 34e:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <first12Bits.4609>
 352:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <first12Bits.4609+0x1>
			c = ( uint8_t ) (first12Bits >> 4);
 356:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <first12Bits.4609>
 35a:	30 91 04 20 	lds	r19, 0x2004	; 0x802004 <first12Bits.4609+0x1>
 35e:	32 95       	swap	r19
 360:	22 95       	swap	r18
 362:	2f 70       	andi	r18, 0x0F	; 15
 364:	23 27       	eor	r18, r19
 366:	3f 70       	andi	r19, 0x0F	; 15
 368:	23 27       	eor	r18, r19
			
			break;
 36a:	27 c0       	rjmp	.+78     	; 0x3ba <__vector_24+0xce>
	
		// case 0: read out the 16bits value from the lookupTable. Send MSB
	

		case( 1 ):
			if(row == 0)
 36c:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <row.4608>
 370:	81 11       	cpse	r24, r1
 372:	07 c0       	rjmp	.+14     	; 0x382 <__vector_24+0x96>
				second12Bits = 0b1111111111111111;
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	3f ef       	ldi	r19, 0xFF	; 255
 378:	20 93 01 20 	sts	0x2001, r18	; 0x802001 <second12Bits.4610>
 37c:	30 93 02 20 	sts	0x2002, r19	; 0x802002 <second12Bits.4610+0x1>
 380:	04 c0       	rjmp	.+8      	; 0x38a <__vector_24+0x9e>
			else second12Bits = 0;
 382:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <second12Bits.4610>
 386:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <second12Bits.4610+0x1>
			++_12bytesSent;
 38a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 38e:	8f 5f       	subi	r24, 0xFF	; 255
 390:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
			c = (uint8_t) ( first12Bits << 4 );
 394:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <first12Bits.4609>
 398:	82 2f       	mov	r24, r18
 39a:	82 95       	swap	r24
 39c:	80 7f       	andi	r24, 0xF0	; 240
			MSB_filter_var = ((uint8_t) ( second12Bits >> 8 ))  & 0x0F;
			c |= MSB_filter_var;
 39e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <second12Bits.4610+0x1>
 3a2:	2f 70       	andi	r18, 0x0F	; 15
 3a4:	28 2b       	or	r18, r24
			
			break;
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <__vector_24+0xce>
				The MSB_filter_var eliminates these bits away.
		*/
			
		case( 2 ):
		
			c = (uint8_t) second12Bits;
 3a8:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <second12Bits.4610>
			_12bytesSent++;
 3ac:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
			break;
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <__vector_24+0xce>
	static uint8_t		row				= 0;
	
	static uint16_t		first12Bits		= 0;
	static uint16_t		second12Bits	= 0;
	
	uint8_t				c				= 0;
 3b8:	20 e0       	ldi	r18, 0x00	; 0
		break;
		
		
		}
		
		SPIC.DATA = c;                  // send data
 3ba:	20 93 c3 08 	sts	0x08C3, r18	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
		_8bytesSent++;
 3be:	9f 5f       	subi	r25, 0xFF	; 255
 3c0:	90 93 06 20 	sts	0x2006, r25	; 0x802006 <_8bytesSent.4607>
		
		if ( _12bytesSent > 24  || _8bytesSent > 36 )					// if reached end
 3c4:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 3c8:	89 31       	cpi	r24, 0x19	; 25
 3ca:	10 f4       	brcc	.+4      	; 0x3d0 <__vector_24+0xe4>
 3cc:	95 32       	cpi	r25, 0x25	; 37
 3ce:	18 f1       	brcs	.+70     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			row++;
 3d0:	c0 91 05 20 	lds	r28, 0x2005	; 0x802005 <row.4608>
 3d4:	cf 5f       	subi	r28, 0xFF	; 255
 3d6:	c0 93 05 20 	sts	0x2005, r28	; 0x802005 <row.4608>
			SPI_blankAndLatch();
 3da:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_blankAndLatch>
			
			SPIC.INTCTRL	&=		~( ( 1 << 0 ) | ( 1 << 1 ) );		// turn off interrupts
 3de:	e0 ec       	ldi	r30, 0xC0	; 192
 3e0:	f8 e0       	ldi	r31, 0x08	; 8
 3e2:	81 81       	ldd	r24, Z+1	; 0x01
 3e4:	8c 7f       	andi	r24, 0xFC	; 252
 3e6:	81 83       	std	Z+1, r24	; 0x01
			_12bytesSent	=		0;
 3e8:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_end>
			_8bytesSent		=		0;
 3ec:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <_8bytesSent.4607>
			
			if(row > 8){
 3f0:	c9 30       	cpi	r28, 0x09	; 9
 3f2:	30 f0       	brcs	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
				row = 0;
 3f4:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <row.4608>
				PORTA.OUT = (1<<0);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 3fe:	0b c0       	rjmp	.+22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			}
			else if (row == 1) PORTA.OUT = (1<<0);
 400:	c1 30       	cpi	r28, 0x01	; 1
 402:	21 f4       	brne	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			else {
				PORTA.OUT= PORTA.OUT << 1;
 40c:	e0 e0       	ldi	r30, 0x00	; 0
 40e:	f6 e0       	ldi	r31, 0x06	; 6
 410:	84 81       	ldd	r24, Z+4	; 0x04
 412:	88 0f       	add	r24, r24
 414:	84 83       	std	Z+4, r24	; 0x04
				}
			
		}	
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	cf 91       	pop	r28
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0b be       	out	0x3b, r0	; 59
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <Timer0_init>:
#include "SPI.h"

uint8_t ranForFirstTime = 0;
void Timer0_init(void)
{
	TCC0.CTRLA = 0b00000011; //PRESCALER CLK_DIV4
 43e:	e0 e0       	ldi	r30, 0x00	; 0
 440:	f8 e0       	ldi	r31, 0x08	; 8
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	80 83       	st	Z, r24
	TCC0.INTCTRLA = 0b00000011; //Interrupt level HIGH
 446:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 5000;
 448:	88 e8       	ldi	r24, 0x88	; 136
 44a:	93 e1       	ldi	r25, 0x13	; 19
 44c:	86 a3       	std	Z+38, r24	; 0x26
 44e:	97 a3       	std	Z+39, r25	; 0x27
 450:	08 95       	ret

00000452 <__vector_14>:
}
/*		Timer 0 is used for the periodic update of the Display		*/

ISR ( TCC0_OVF_vect )
{
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	0b b6       	in	r0, 0x3b	; 59
 45e:	0f 92       	push	r0
 460:	2f 93       	push	r18
 462:	3f 93       	push	r19
 464:	4f 93       	push	r20
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
 474:	ef 93       	push	r30
 476:	ff 93       	push	r31
	SPI_update();
 478:	0e 94 67 01 	call	0x2ce	; 0x2ce <SPI_update>
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0b be       	out	0x3b, r0	; 59
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
