
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00802000  000006fe  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008020c0  008020c0  00000852  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000398b  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a16  00000000  00000000  000042ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097f  00000000  00000000  00006d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00007694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023fb  00000000  00000000  00007814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  00009c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00009ef5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__ctors_end>
   4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
   8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
   c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  10:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  14:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  18:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  1c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  20:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  24:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  28:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  2c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  30:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  34:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  38:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_14>
  3c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  40:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  44:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  48:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  4c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  50:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  54:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  58:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  5c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  60:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_24>
  64:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  68:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  6c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  70:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  74:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  78:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  7c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  80:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  84:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  88:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  8c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  90:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  94:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  98:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  9c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  a0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  a4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  a8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  ac:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  b0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  b4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  b8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  bc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  c0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  c4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  c8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  cc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  d0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  d4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  d8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  dc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  e0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  e4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  e8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  ec:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  f0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  f4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  f8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  fc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 100:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 104:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 108:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 10c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 110:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 114:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 118:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 11c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 120:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 124:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 128:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 12c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 130:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 134:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 138:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 13c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 140:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 144:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 148:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 14c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 150:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 154:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 158:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 15c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 160:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 164:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 168:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 16c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 170:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 174:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 178:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 17c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 180:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 184:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 188:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 18c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 190:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 194:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 198:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 19c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1a0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1a4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1a8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1ac:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1b0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1b4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1b8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1bc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1c0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1c4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1c8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1cc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1d0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1d4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1d8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1dc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1e0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1e4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1e8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1ec:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1f0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1f4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1f8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>

000001fc <BrightnessLookUpTable>:
 1fc:	00 00 00 00 00 00 01 00 01 00 02 00 03 00 04 00     ................
 20c:	05 00 06 00 07 00 09 00 0a 00 0c 00 0e 00 10 00     ................
 21c:	12 00 14 00 16 00 19 00 1b 00 1e 00 21 00 24 00     ............!.$.
 22c:	27 00 2a 00 2d 00 31 00 34 00 38 00 3c 00 40 00     '.*.-.1.4.8.<.@.
 23c:	44 00 48 00 4d 00 51 00 56 00 5a 00 5f 00 64 00     D.H.M.Q.V.Z._.d.
 24c:	69 00 6f 00 74 00 79 00 7f 00 85 00 8b 00 91 00     i.o.t.y.........
 25c:	97 00 9d 00 a3 00 aa 00 b0 00 b7 00 be 00 c5 00     ................
 26c:	cc 00 d3 00 db 00 e2 00 ea 00 f2 00 fa 00 02 01     ................
 27c:	0a 01 12 01 1a 01 23 01 2b 01 34 01 3d 01 46 01     ......#.+.4.=.F.
 28c:	4f 01 58 01 62 01 6b 01 75 01 7f 01 89 01 93 01     O.X.b.k.u.......
 29c:	9d 01 a7 01 b2 01 bc 01 c7 01 d1 01 dc 01 e7 01     ................
 2ac:	f3 01 fe 01 09 02 15 02 20 02 2c 02 38 02 44 02     ........ .,.8.D.
 2bc:	50 02 5d 02 69 02 76 02 82 02 8f 02 9c 02 a9 02     P.].i.v.........
 2cc:	b6 02 c3 02 d1 02 de 02 ec 02 fa 02 08 03 16 03     ................
 2dc:	24 03 32 03 41 03 4f 03 5e 03 6d 03 7c 03 8b 03     $.2.A.O.^.m.|...
 2ec:	9a 03 a9 03 b9 03 c8 03 d8 03 e8 03 f8 03 08 04     ................
 2fc:	18 04 28 04 39 04 49 04 5a 04 6b 04 7c 04 8d 04     ..(.9.I.Z.k.|...
 30c:	9e 04 af 04 c1 04 d2 04 e4 04 f6 04 08 05 1a 05     ................
 31c:	2c 05 3e 05 51 05 63 05 76 05 89 05 9c 05 af 05     ,.>.Q.c.v.......
 32c:	c2 05 d6 05 e9 05 fd 05 10 06 24 06 38 06 4c 06     ..........$.8.L.
 33c:	61 06 75 06 89 06 9e 06 b3 06 c8 06 dd 06 f2 06     a.u.............
 34c:	07 07 1c 07 32 07 47 07 5d 07 73 07 89 07 9f 07     ....2.G.].s.....
 35c:	b5 07 cc 07 e2 07 f9 07 0f 08 26 08 3d 08 54 08     ..........&.=.T.
 36c:	6c 08 83 08 9b 08 b2 08 ca 08 e2 08 fa 08 12 09     l...............
 37c:	2a 09 43 09 5b 09 74 09 8c 09 a5 09 be 09 d8 09     *.C.[.t.........
 38c:	f1 09 0a 0a 24 0a 3d 0a 57 0a 71 0a 8b 0a a5 0a     ....$.=.W.q.....
 39c:	bf 0a da 0a f4 0a 0f 0b 2a 0b 45 0b 60 0b 7b 0b     ........*.E.`.{.
 3ac:	96 0b b2 0b cd 0b e9 0b 04 0c 20 0c 3c 0c 59 0c     .......... .<.Y.
 3bc:	75 0c 91 0c ae 0c ca 0c e7 0c 04 0d 21 0d 3e 0d     u...........!.>.
 3cc:	5c 0d 79 0d 97 0d b4 0d d2 0d f0 0d 0e 0e 2c 0e     \.y...........,.
 3dc:	4b 0e 69 0e 88 0e a6 0e c5 0e e4 0e 03 0f 22 0f     K.i...........".
 3ec:	42 0f 61 0f 81 0f a0 0f c0 0f e0 0f ff 0f ff 0f     B.a.............

000003fc <__ctors_end>:
 3fc:	11 24       	eor	r1, r1
 3fe:	1f be       	out	0x3f, r1	; 63
 400:	cf ef       	ldi	r28, 0xFF	; 255
 402:	cd bf       	out	0x3d, r28	; 61
 404:	df e2       	ldi	r29, 0x2F	; 47
 406:	de bf       	out	0x3e, r29	; 62

00000408 <__do_copy_data>:
 408:	10 e2       	ldi	r17, 0x20	; 32
 40a:	a0 e0       	ldi	r26, 0x00	; 0
 40c:	b0 e2       	ldi	r27, 0x20	; 32
 40e:	ee ef       	ldi	r30, 0xFE	; 254
 410:	f6 e0       	ldi	r31, 0x06	; 6
 412:	00 e0       	ldi	r16, 0x00	; 0
 414:	0b bf       	out	0x3b, r16	; 59
 416:	02 c0       	rjmp	.+4      	; 0x41c <__do_copy_data+0x14>
 418:	07 90       	elpm	r0, Z+
 41a:	0d 92       	st	X+, r0
 41c:	a0 3c       	cpi	r26, 0xC0	; 192
 41e:	b1 07       	cpc	r27, r17
 420:	d9 f7       	brne	.-10     	; 0x418 <__do_copy_data+0x10>

00000422 <__do_clear_bss>:
 422:	20 e2       	ldi	r18, 0x20	; 32
 424:	a0 ec       	ldi	r26, 0xC0	; 192
 426:	b0 e2       	ldi	r27, 0x20	; 32
 428:	01 c0       	rjmp	.+2      	; 0x42c <.do_clear_bss_start>

0000042a <.do_clear_bss_loop>:
 42a:	1d 92       	st	X+, r1

0000042c <.do_clear_bss_start>:
 42c:	a7 3c       	cpi	r26, 0xC7	; 199
 42e:	b2 07       	cpc	r27, r18
 430:	e1 f7       	brne	.-8      	; 0x42a <.do_clear_bss_loop>
 432:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
 436:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_exit>

0000043a <__bad_interrupt>:
 43a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000043e <Display_getChannelBrightness>:
void Display_setChannelBrightness(int row, int channel, uint8_t brightness){
	DisplayData[row][channel] = brightness;
}

uint8_t Display_getChannelBrightness(int row, int channel){
	return DisplayData[row][channel];
 43e:	9c 01       	movw	r18, r24
 440:	22 0f       	add	r18, r18
 442:	33 1f       	adc	r19, r19
 444:	82 0f       	add	r24, r18
 446:	93 1f       	adc	r25, r19
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	80 50       	subi	r24, 0x00	; 0
 456:	90 4e       	sbci	r25, 0xE0	; 224
 458:	fc 01       	movw	r30, r24
 45a:	e6 0f       	add	r30, r22
 45c:	f7 1f       	adc	r31, r23
}
 45e:	80 81       	ld	r24, Z
 460:	08 95       	ret

00000462 <clock_init>:
		
	}
}

void clock_init(){
	OSC.CTRL |= OSC_RC32MEN_bm;
 462:	e0 e5       	ldi	r30, 0x50	; 80
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 46c:	81 81       	ldd	r24, Z+1	; 0x01
 46e:	81 ff       	sbrs	r24, 1
 470:	fd cf       	rjmp	.-6      	; 0x46c <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC32M_gc);
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	88 ed       	ldi	r24, 0xD8	; 216
 476:	84 bf       	out	0x34, r24	; 52
 478:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 47c:	08 95       	ret

0000047e <main>:

void clock_init(void);

int main(void)
{
	clock_init();
 47e:	0e 94 31 02 	call	0x462	; 0x462 <clock_init>
	SPI_init();
 482:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_init>
	Timer0_init();
 486:	0e 94 4b 03 	call	0x696	; 0x696 <Timer0_init>
	
	
	
	
	PORTA.DIRSET = 0b11111111; //ROW2
 48a:	e0 e0       	ldi	r30, 0x00	; 0
 48c:	f6 e0       	ldi	r31, 0x06	; 6
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0b00000000; //ROW2
 492:	15 82       	std	Z+5, r1	; 0x05
	SPIC.DATA = 0; //Used to trigger the SPI interrupts
 494:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	
	sei(); //activate global interrupts
 498:	78 94       	sei
	PMIC.CTRL |= 7; //all interrupt levels are enabled
 49a:	e0 ea       	ldi	r30, 0xA0	; 160
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	82 81       	ldd	r24, Z+2	; 0x02
 4a0:	87 60       	ori	r24, 0x07	; 7
 4a2:	82 83       	std	Z+2, r24	; 0x02
	
	
	while (1) 
    {
		_NOP();
 4a4:	00 00       	nop
		_NOP();
 4a6:	00 00       	nop
		_NOP();
 4a8:	00 00       	nop
 4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <main+0x26>

000004ac <SPI_init>:
#include "Display.h"
#include "ProgmemData.h"


void SPI_init(void){
	PORTC.DIRSET |= 1 << 0; //Latch pin for TLC5947
 4ac:	e0 e4       	ldi	r30, 0x40	; 64
 4ae:	f6 e0       	ldi	r31, 0x06	; 6
 4b0:	81 81       	ldd	r24, Z+1	; 0x01
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 4b6:	81 81       	ldd	r24, Z+1	; 0x01
 4b8:	82 60       	ori	r24, 0x02	; 2
 4ba:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 7; //SCK pin for TLC5947
 4bc:	81 81       	ldd	r24, Z+1	; 0x01
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 4c2:	81 81       	ldd	r24, Z+1	; 0x01
 4c4:	80 62       	ori	r24, 0x20	; 32
 4c6:	81 83       	std	Z+1, r24	; 0x01


	PORTC.PIN4CTRL |= PORT_OPC_PULLUP_gc;
 4c8:	84 89       	ldd	r24, Z+20	; 0x14
 4ca:	88 61       	ori	r24, 0x18	; 24
 4cc:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.DIRSET |= 1 << 4; //Slave select
 4ce:	81 81       	ldd	r24, Z+1	; 0x01
 4d0:	80 61       	ori	r24, 0x10	; 16
 4d2:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= 1 << 4; //Slave select HIGH
 4d4:	85 81       	ldd	r24, Z+5	; 0x05
 4d6:	80 61       	ori	r24, 0x10	; 16
 4d8:	85 83       	std	Z+5, r24	; 0x05
	

	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV128_gc | SPI_CLK2X_bm;
 4da:	a0 ec       	ldi	r26, 0xC0	; 192
 4dc:	b8 e0       	ldi	r27, 0x08	; 8
 4de:	8c 91       	ld	r24, X
 4e0:	83 6d       	ori	r24, 0xD3	; 211
 4e2:	8c 93       	st	X, r24
	SPIC.INTCTRL |= SPI_INTLVL_LO_gc;
 4e4:	11 96       	adiw	r26, 0x01	; 1
 4e6:	8c 91       	ld	r24, X
 4e8:	11 97       	sbiw	r26, 0x01	; 1
 4ea:	81 60       	ori	r24, 0x01	; 1
 4ec:	11 96       	adiw	r26, 0x01	; 1
 4ee:	8c 93       	st	X, r24
	
	PORTC.OUTCLR |= 1 << 0;
 4f0:	86 81       	ldd	r24, Z+6	; 0x06
 4f2:	81 60       	ori	r24, 0x01	; 1
 4f4:	86 83       	std	Z+6, r24	; 0x06
 4f6:	08 95       	ret

000004f8 <SPI_update>:
}

void SPI_update(void){
	SPIC.INTCTRL |= SPI_INTLVL_MED_gc; // interrupt level for SPIC set to medium
 4f8:	e0 ec       	ldi	r30, 0xC0	; 192
 4fa:	f8 e0       	ldi	r31, 0x08	; 8
 4fc:	81 81       	ldd	r24, Z+1	; 0x01
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	81 83       	std	Z+1, r24	; 0x01
 502:	08 95       	ret

00000504 <SPI_blankAndLatch>:
}

void SPI_blankAndLatch(void){
	PORTC.OUTSET |= 1 << 0 | 1<<1;
 504:	e0 e4       	ldi	r30, 0x40	; 64
 506:	f6 e0       	ldi	r31, 0x06	; 6
 508:	85 81       	ldd	r24, Z+5	; 0x05
 50a:	83 60       	ori	r24, 0x03	; 3
 50c:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR |= 1 << 0 | 1<<1;
 50e:	86 81       	ldd	r24, Z+6	; 0x06
 510:	83 60       	ori	r24, 0x03	; 3
 512:	86 83       	std	Z+6, r24	; 0x06
 514:	08 95       	ret

00000516 <__vector_24>:
}

ISR ( SPIC_INT_vect )
{
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	0b b6       	in	r0, 0x3b	; 59
 522:	0f 92       	push	r0
 524:	2f 93       	push	r18
 526:	3f 93       	push	r19
 528:	4f 93       	push	r20
 52a:	5f 93       	push	r21
 52c:	6f 93       	push	r22
 52e:	7f 93       	push	r23
 530:	8f 93       	push	r24
 532:	9f 93       	push	r25
 534:	af 93       	push	r26
 536:	bf 93       	push	r27
 538:	ef 93       	push	r30
 53a:	ff 93       	push	r31
	The data is sent in batches of two 12bits variables, divided into three 8bits variables. ( 12*2 == 8*3 )
	The sending of the two 12bits variables are divided into three actions, each one choosing the appropriate bits
	to put into the 8bit variable c, which is transmitted once the switch ends.
*/
	
	switch ( _8bytesSent % 3 )			
 53c:	90 91 c6 20 	lds	r25, 0x20C6	; 0x8020c6 <_8bytesSent.4613>
 540:	8b ea       	ldi	r24, 0xAB	; 171
 542:	98 9f       	mul	r25, r24
 544:	81 2d       	mov	r24, r1
 546:	11 24       	eor	r1, r1
 548:	86 95       	lsr	r24
 54a:	28 2f       	mov	r18, r24
 54c:	22 0f       	add	r18, r18
 54e:	82 0f       	add	r24, r18
 550:	98 1b       	sub	r25, r24
 552:	91 30       	cpi	r25, 0x01	; 1
 554:	19 f1       	breq	.+70     	; 0x59c <__vector_24+0x86>
 556:	20 f0       	brcs	.+8      	; 0x560 <__vector_24+0x4a>
 558:	92 30       	cpi	r25, 0x02	; 2
 55a:	09 f4       	brne	.+2      	; 0x55e <__vector_24+0x48>
 55c:	40 c0       	rjmp	.+128    	; 0x5de <__vector_24+0xc8>
 55e:	47 c0       	rjmp	.+142    	; 0x5ee <__vector_24+0xd8>
	{
		case ( 0 ):
			first12Bits = pgm_read_word(  & (  BrightnessLookUpTable[Display_getChannelBrightness(row,23-_12bytesSent)] ) );
 560:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <_12bytesSent.4612>
 564:	67 e1       	ldi	r22, 0x17	; 23
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	68 1b       	sub	r22, r24
 56a:	71 09       	sbc	r23, r1
 56c:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <row.4614>
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 1f 02 	call	0x43e	; 0x43e <Display_getChannelBrightness>
 576:	e8 2f       	mov	r30, r24
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	ee 0f       	add	r30, r30
 57c:	ff 1f       	adc	r31, r31
 57e:	e4 50       	subi	r30, 0x04	; 4
 580:	fe 4f       	sbci	r31, 0xFE	; 254
 582:	85 91       	lpm	r24, Z+
 584:	94 91       	lpm	r25, Z
 586:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <first12Bits.4615>
 58a:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <first12Bits.4615+0x1>
			c = ( uint8_t ) (first12Bits >> 4);
 58e:	92 95       	swap	r25
 590:	82 95       	swap	r24
 592:	8f 70       	andi	r24, 0x0F	; 15
 594:	89 27       	eor	r24, r25
 596:	9f 70       	andi	r25, 0x0F	; 15
 598:	89 27       	eor	r24, r25
			
			break;
 59a:	2a c0       	rjmp	.+84     	; 0x5f0 <__vector_24+0xda>

		case( 1 ):
			++_12bytesSent;
 59c:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <_12bytesSent.4612>
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <_12bytesSent.4612>
			second12Bits = pgm_read_word(  & (   BrightnessLookUpTable[Display_getChannelBrightness(row,23-_12bytesSent)]) );
 5a6:	67 e1       	ldi	r22, 0x17	; 23
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	68 1b       	sub	r22, r24
 5ac:	71 09       	sbc	r23, r1
 5ae:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <row.4614>
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 1f 02 	call	0x43e	; 0x43e <Display_getChannelBrightness>
 5b8:	e8 2f       	mov	r30, r24
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	ee 0f       	add	r30, r30
 5be:	ff 1f       	adc	r31, r31
 5c0:	e4 50       	subi	r30, 0x04	; 4
 5c2:	fe 4f       	sbci	r31, 0xFE	; 254
 5c4:	85 91       	lpm	r24, Z+
 5c6:	94 91       	lpm	r25, Z
 5c8:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <__data_end>
 5cc:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <__data_end+0x1>
			c = (uint8_t) ( first12Bits << 4 );
 5d0:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <first12Bits.4615>
 5d4:	82 95       	swap	r24
 5d6:	80 7f       	andi	r24, 0xF0	; 240
			MSB_filter_var = ((uint8_t) ( second12Bits >> 8 ))  & 0x0F;
			c |= MSB_filter_var;
 5d8:	9f 70       	andi	r25, 0x0F	; 15
 5da:	89 2b       	or	r24, r25

			break;
 5dc:	09 c0       	rjmp	.+18     	; 0x5f0 <__vector_24+0xda>
			
		case( 2 ):
		
			c = (uint8_t) second12Bits;
 5de:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <__data_end>
			_12bytesSent++;
 5e2:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <_12bytesSent.4612>
 5e6:	9f 5f       	subi	r25, 0xFF	; 255
 5e8:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <_12bytesSent.4612>
			break;	
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <__vector_24+0xda>
	static uint8_t		row				= 0;
	
	static uint16_t		first12Bits		= 0;
	static uint16_t		second12Bits	= 0;
	
	uint8_t				c				= 0;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		
		}
		
		SPIC.DATA = c;                  // send data
 5f0:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
		_8bytesSent++;
 5f4:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <_8bytesSent.4613>
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <_8bytesSent.4613>
		
		if ( _12bytesSent >= 24  || _8bytesSent >= 36 )					// if reached end
 5fe:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <_12bytesSent.4612>
 602:	98 31       	cpi	r25, 0x18	; 24
 604:	10 f4       	brcc	.+4      	; 0x60a <__vector_24+0xf4>
 606:	84 32       	cpi	r24, 0x24	; 36
 608:	98 f1       	brcs	.+102    	; 0x670 <__vector_24+0x15a>
		{
			while(!(SPIC_STATUS & SPI_IF_bm)){}
 60a:	e2 ec       	ldi	r30, 0xC2	; 194
 60c:	f8 e0       	ldi	r31, 0x08	; 8
 60e:	80 81       	ld	r24, Z
 610:	88 23       	and	r24, r24
 612:	ec f7       	brge	.-6      	; 0x60e <__vector_24+0xf8>
			SPI_blankAndLatch();
 614:	0e 94 82 02 	call	0x504	; 0x504 <SPI_blankAndLatch>
			
			SPIC.INTCTRL	&=		~( ( 1 << 0 ) | ( 1 << 1 ) );		// turn off interrupts
 618:	e0 ec       	ldi	r30, 0xC0	; 192
 61a:	f8 e0       	ldi	r31, 0x08	; 8
 61c:	81 81       	ldd	r24, Z+1	; 0x01
 61e:	8c 7f       	andi	r24, 0xFC	; 252
 620:	81 83       	std	Z+1, r24	; 0x01
			_12bytesSent	=		0;
 622:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <_12bytesSent.4612>
			_8bytesSent		=		0;
 626:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <_8bytesSent.4613>
			
			if(row > 7){
 62a:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <row.4614>
 62e:	88 30       	cpi	r24, 0x08	; 8
 630:	30 f0       	brcs	.+12     	; 0x63e <__vector_24+0x128>
				row = 0;
 632:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <row.4614>
				PORTA.OUT = (1<<0);
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 63c:	14 c0       	rjmp	.+40     	; 0x666 <__vector_24+0x150>
			}
			else if (row == 0) PORTA.OUT = (1<<0);
 63e:	81 11       	cpse	r24, r1
 640:	04 c0       	rjmp	.+8      	; 0x64a <__vector_24+0x134>
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 648:	0e c0       	rjmp	.+28     	; 0x666 <__vector_24+0x150>
			else PORTA.OUT= PORTA.OUT << 1;
 64a:	e0 e0       	ldi	r30, 0x00	; 0
 64c:	f6 e0       	ldi	r31, 0x06	; 6
 64e:	94 81       	ldd	r25, Z+4	; 0x04
 650:	99 0f       	add	r25, r25
 652:	94 83       	std	Z+4, r25	; 0x04
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 654:	8f 5f       	subi	r24, 0xFF	; 255
			if(row == 8)
 656:	88 30       	cpi	r24, 0x08	; 8
 658:	19 f0       	breq	.+6      	; 0x660 <__vector_24+0x14a>
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 65a:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <row.4614>
 65e:	08 c0       	rjmp	.+16     	; 0x670 <__vector_24+0x15a>
			if(row == 8)
				row = 0;
 660:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <row.4614>
			
		}	
}
 664:	05 c0       	rjmp	.+10     	; 0x670 <__vector_24+0x15a>
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 666:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <row.4614>
 66a:	8f 5f       	subi	r24, 0xFF	; 255
 66c:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <row.4614>
			if(row == 8)
				row = 0;
			
		}	
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0b be       	out	0x3b, r0	; 59
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <Timer0_init>:
#include "Timer.h"
#include "SPI.h"

void Timer0_init(void)
{
	TCC0.CTRLA = 0b00000011; //PRESCALER CLK_DIV4
 696:	e0 e0       	ldi	r30, 0x00	; 0
 698:	f8 e0       	ldi	r31, 0x08	; 8
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	80 83       	st	Z, r24
	TCC0.INTCTRLA = 0b00000011; //Interrupt level HIGH
 69e:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 15000;
 6a0:	88 e9       	ldi	r24, 0x98	; 152
 6a2:	9a e3       	ldi	r25, 0x3A	; 58
 6a4:	86 a3       	std	Z+38, r24	; 0x26
 6a6:	97 a3       	std	Z+39, r25	; 0x27
 6a8:	08 95       	ret

000006aa <__vector_14>:
}
/*		Timer 0 is used for the periodic update of the Display		*/

ISR ( TCC0_OVF_vect )
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	0b b6       	in	r0, 0x3b	; 59
 6b6:	0f 92       	push	r0
 6b8:	2f 93       	push	r18
 6ba:	3f 93       	push	r19
 6bc:	4f 93       	push	r20
 6be:	5f 93       	push	r21
 6c0:	6f 93       	push	r22
 6c2:	7f 93       	push	r23
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
 6c8:	af 93       	push	r26
 6ca:	bf 93       	push	r27
 6cc:	ef 93       	push	r30
 6ce:	ff 93       	push	r31
	SPI_update();
 6d0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <SPI_update>
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0b be       	out	0x3b, r0	; 59
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <_exit>:
 6fa:	f8 94       	cli

000006fc <__stop_program>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <__stop_program>
