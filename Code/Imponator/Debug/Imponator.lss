
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00802000  000009d2  00000a66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008020c2  008020c2  00000b28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004aa9  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cf6  00000000  00000000  00005771  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da9  00000000  00000000  00008467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00009210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002651  00000000  00000000  000094dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000590  00000000  00000000  0000bb2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000c0bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 02 	jmp	0x494	; 0x494 <__ctors_end>
   4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
   8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
   c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  10:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  14:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  18:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  1c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  20:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  24:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  28:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  2c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  30:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  34:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  38:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_14>
  3c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  40:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  44:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  48:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  4c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  50:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_20>
  54:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  58:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  5c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  60:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_24>
  64:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  68:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  6c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  70:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  74:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  78:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  7c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  80:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  84:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  88:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  8c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  90:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  94:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  98:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  9c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  a0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  a4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  a8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  ac:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  b0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  b4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  b8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  bc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  c0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  c4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  c8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  cc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  d0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  d4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  d8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  dc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  e0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  e4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  e8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  ec:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  f0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  f4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  f8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
  fc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 100:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_64>
 104:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 108:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 10c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 110:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 114:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 118:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 11c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 120:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 124:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 128:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 12c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 130:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 134:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 138:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 13c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 140:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 144:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 148:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 14c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 150:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 154:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 158:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 15c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 160:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 164:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 168:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 16c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 170:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 174:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 178:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 17c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 180:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 184:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 188:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 18c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 190:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 194:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 198:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 19c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1a0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1a4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1a8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1ac:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1b0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1b4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1b8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1bc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1c0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1c4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1c8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1cc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1d0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1d4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1d8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1dc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1e0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1e4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1e8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1ec:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1f0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1f4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
 1f8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>

000001fc <IMAGES>:
	...
 204:	00 00 01 01 01 00 00 01 00 01 02 02 02 01 00 03     ................
 214:	01 02 04 04 04 02 01 07 03 04 08 08 08 04 02 0e     ................
 224:	07 08 10 10 10 08 04 1c 0f 10 20 20 20 10 09 39     ..........   ..9
 234:	1e 21 40 40 40 21 12 73 3c 42 81 81 81 42 24 e7     .!@@@!.s<B...B$.
 244:	3c 42 81 81 81 42 24 e7 3c 42 81 81 81 42 24 e7     <B...B$.<B...B$.
 254:	78 84 02 02 02 84 48 ce f0 08 04 04 04 08 90 9c     x.....H.........
 264:	e0 10 08 08 08 10 20 38 c0 20 10 10 10 20 40 70     ...... 8. ... @p
 274:	80 40 20 20 20 40 80 e0 00 80 40 40 40 80 00 c0     .@   @....@@@...
 284:	00 00 80 80 80 00 00 80 00 00 00 00 00 00 00 00     ................

00000294 <BrightnessLookUpTable>:
 294:	00 00 00 00 00 00 01 00 01 00 02 00 03 00 04 00     ................
 2a4:	05 00 06 00 07 00 09 00 0a 00 0c 00 0e 00 10 00     ................
 2b4:	12 00 14 00 16 00 19 00 1b 00 1e 00 21 00 24 00     ............!.$.
 2c4:	27 00 2a 00 2d 00 31 00 34 00 38 00 3c 00 40 00     '.*.-.1.4.8.<.@.
 2d4:	44 00 48 00 4d 00 51 00 56 00 5a 00 5f 00 64 00     D.H.M.Q.V.Z._.d.
 2e4:	69 00 6f 00 74 00 79 00 7f 00 85 00 8b 00 91 00     i.o.t.y.........
 2f4:	97 00 9d 00 a3 00 aa 00 b0 00 b7 00 be 00 c5 00     ................
 304:	cc 00 d3 00 db 00 e2 00 ea 00 f2 00 fa 00 02 01     ................
 314:	0a 01 12 01 1a 01 23 01 2b 01 34 01 3d 01 46 01     ......#.+.4.=.F.
 324:	4f 01 58 01 62 01 6b 01 75 01 7f 01 89 01 93 01     O.X.b.k.u.......
 334:	9d 01 a7 01 b2 01 bc 01 c7 01 d1 01 dc 01 e7 01     ................
 344:	f3 01 fe 01 09 02 15 02 20 02 2c 02 38 02 44 02     ........ .,.8.D.
 354:	50 02 5d 02 69 02 76 02 82 02 8f 02 9c 02 a9 02     P.].i.v.........
 364:	b6 02 c3 02 d1 02 de 02 ec 02 fa 02 08 03 16 03     ................
 374:	24 03 32 03 41 03 4f 03 5e 03 6d 03 7c 03 8b 03     $.2.A.O.^.m.|...
 384:	9a 03 a9 03 b9 03 c8 03 d8 03 e8 03 f8 03 08 04     ................
 394:	18 04 28 04 39 04 49 04 5a 04 6b 04 7c 04 8d 04     ..(.9.I.Z.k.|...
 3a4:	9e 04 af 04 c1 04 d2 04 e4 04 f6 04 08 05 1a 05     ................
 3b4:	2c 05 3e 05 51 05 63 05 76 05 89 05 9c 05 af 05     ,.>.Q.c.v.......
 3c4:	c2 05 d6 05 e9 05 fd 05 10 06 24 06 38 06 4c 06     ..........$.8.L.
 3d4:	61 06 75 06 89 06 9e 06 b3 06 c8 06 dd 06 f2 06     a.u.............
 3e4:	07 07 1c 07 32 07 47 07 5d 07 73 07 89 07 9f 07     ....2.G.].s.....
 3f4:	b5 07 cc 07 e2 07 f9 07 0f 08 26 08 3d 08 54 08     ..........&.=.T.
 404:	6c 08 83 08 9b 08 b2 08 ca 08 e2 08 fa 08 12 09     l...............
 414:	2a 09 43 09 5b 09 74 09 8c 09 a5 09 be 09 d8 09     *.C.[.t.........
 424:	f1 09 0a 0a 24 0a 3d 0a 57 0a 71 0a 8b 0a a5 0a     ....$.=.W.q.....
 434:	bf 0a da 0a f4 0a 0f 0b 2a 0b 45 0b 60 0b 7b 0b     ........*.E.`.{.
 444:	96 0b b2 0b cd 0b e9 0b 04 0c 20 0c 3c 0c 59 0c     .......... .<.Y.
 454:	75 0c 91 0c ae 0c ca 0c e7 0c 04 0d 21 0d 3e 0d     u...........!.>.
 464:	5c 0d 79 0d 97 0d b4 0d d2 0d f0 0d 0e 0e 2c 0e     \.y...........,.
 474:	4b 0e 69 0e 88 0e a6 0e c5 0e e4 0e 03 0f 22 0f     K.i...........".
 484:	42 0f 61 0f 81 0f a0 0f c0 0f e0 0f ff 0f ff 0f     B.a.............

00000494 <__ctors_end>:
 494:	11 24       	eor	r1, r1
 496:	1f be       	out	0x3f, r1	; 63
 498:	cf ef       	ldi	r28, 0xFF	; 255
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	df e2       	ldi	r29, 0x2F	; 47
 49e:	de bf       	out	0x3e, r29	; 62

000004a0 <__do_copy_data>:
 4a0:	10 e2       	ldi	r17, 0x20	; 32
 4a2:	a0 e0       	ldi	r26, 0x00	; 0
 4a4:	b0 e2       	ldi	r27, 0x20	; 32
 4a6:	e2 ed       	ldi	r30, 0xD2	; 210
 4a8:	f9 e0       	ldi	r31, 0x09	; 9
 4aa:	00 e0       	ldi	r16, 0x00	; 0
 4ac:	0b bf       	out	0x3b, r16	; 59
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__do_copy_data+0x14>
 4b0:	07 90       	elpm	r0, Z+
 4b2:	0d 92       	st	X+, r0
 4b4:	a2 3c       	cpi	r26, 0xC2	; 194
 4b6:	b1 07       	cpc	r27, r17
 4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__do_copy_data+0x10>

000004ba <__do_clear_bss>:
 4ba:	20 e2       	ldi	r18, 0x20	; 32
 4bc:	a2 ec       	ldi	r26, 0xC2	; 194
 4be:	b0 e2       	ldi	r27, 0x20	; 32
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <.do_clear_bss_start>

000004c2 <.do_clear_bss_loop>:
 4c2:	1d 92       	st	X+, r1

000004c4 <.do_clear_bss_start>:
 4c4:	a5 3d       	cpi	r26, 0xD5	; 213
 4c6:	b2 07       	cpc	r27, r18
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <.do_clear_bss_loop>
 4ca:	0e 94 9d 02 	call	0x53a	; 0x53a <main>
 4ce:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_exit>

000004d2 <__bad_interrupt>:
 4d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004d6 <Display_setChannelBrightness>:
	{0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111,0,0,0b11111111}
};


void Display_setChannelBrightness(uint8_t row, uint8_t channel, uint8_t brightness){
	DisplayData[row][channel] = brightness;
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	fc 01       	movw	r30, r24
 4da:	ee 0f       	add	r30, r30
 4dc:	ff 1f       	adc	r31, r31
 4de:	e8 0f       	add	r30, r24
 4e0:	f9 1f       	adc	r31, r25
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	ee 0f       	add	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	e0 50       	subi	r30, 0x00	; 0
 4f0:	f0 4e       	sbci	r31, 0xE0	; 224
 4f2:	e6 0f       	add	r30, r22
 4f4:	f1 1d       	adc	r31, r1
 4f6:	40 83       	st	Z, r20
 4f8:	08 95       	ret

000004fa <Display_getChannelBrightness>:
}

uint8_t Display_getChannelBrightness(uint8_t row, uint8_t channel){
	return DisplayData[row][channel];
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	fc 01       	movw	r30, r24
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	e8 0f       	add	r30, r24
 504:	f9 1f       	adc	r31, r25
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	e0 50       	subi	r30, 0x00	; 0
 514:	f0 4e       	sbci	r31, 0xE0	; 224
 516:	e6 0f       	add	r30, r22
 518:	f1 1d       	adc	r31, r1
}
 51a:	80 81       	ld	r24, Z
 51c:	08 95       	ret

0000051e <clock_init>:
		
	}
}

void clock_init(){
	OSC.CTRL |= OSC_RC32MEN_bm;
 51e:	e0 e5       	ldi	r30, 0x50	; 80
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	82 60       	ori	r24, 0x02	; 2
 526:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 528:	81 81       	ldd	r24, Z+1	; 0x01
 52a:	81 ff       	sbrs	r24, 1
 52c:	fd cf       	rjmp	.-6      	; 0x528 <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC32M_gc);
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	88 ed       	ldi	r24, 0xD8	; 216
 532:	84 bf       	out	0x34, r24	; 52
 534:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 538:	08 95       	ret

0000053a <main>:

void clock_init(void);

int main(void)
{
	clock_init();
 53a:	0e 94 8f 02 	call	0x51e	; 0x51e <clock_init>
	SPI_init();
 53e:	0e 94 8b 03 	call	0x716	; 0x716 <SPI_init>
	Timer0_init();
 542:	0e 94 80 04 	call	0x900	; 0x900 <Timer0_init>
	Timer1_init();
 546:	0e 94 8a 04 	call	0x914	; 0x914 <Timer1_init>
	Peripherals_init();
 54a:	0e 94 c0 02 	call	0x580	; 0x580 <Peripherals_init>
	
	
	
	PORTA.DIRSET = 0b11111111; //ROW2
 54e:	e0 e0       	ldi	r30, 0x00	; 0
 550:	f6 e0       	ldi	r31, 0x06	; 6
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0b00000000; //ROW2
 556:	15 82       	std	Z+5, r1	; 0x05
	SPIC.DATA = 0; //Used to trigger the SPI interrupts
 558:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	
	sei(); //activate global interrupts
 55c:	78 94       	sei
	PMIC.CTRL |= 7; //all interrupt levels are enabled
 55e:	e0 ea       	ldi	r30, 0xA0	; 160
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	82 81       	ldd	r24, Z+2	; 0x02
 564:	87 60       	ori	r24, 0x07	; 7
 566:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 568:	2f ef       	ldi	r18, 0xFF	; 255
 56a:	87 ea       	ldi	r24, 0xA7	; 167
 56c:	91 e6       	ldi	r25, 0x61	; 97
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <main+0x34>
 576:	00 c0       	rjmp	.+0      	; 0x578 <main+0x3e>
 578:	00 00       	nop
	
	_delay_ms(1000);
	
	Print_character();
 57a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Print_character>
 57e:	ff cf       	rjmp	.-2      	; 0x57e <main+0x44>

00000580 <Peripherals_init>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void Peripherals_init(void){
	PORTD.DIRCLR =  (1 << 0) | (1 << BUTTON_1) | (1 << BUTTON_2);
 580:	e0 e6       	ldi	r30, 0x60	; 96
 582:	f6 e0       	ldi	r31, 0x06	; 6
 584:	87 e0       	ldi	r24, 0x07	; 7
 586:	82 83       	std	Z+2, r24	; 0x02
	PORTD.INTCTRL = PORT_INT0LVL_HI_gc;
 588:	93 e0       	ldi	r25, 0x03	; 3
 58a:	91 87       	std	Z+9, r25	; 0x09
	PORTD.INT0MASK = (1 << 0) | (1 << BUTTON_1) | (1 << BUTTON_2);
 58c:	82 87       	std	Z+10, r24	; 0x0a
 58e:	08 95       	ret

00000590 <__vector_64>:
}

ISR (PORTD_INT0_vect){
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
	if (PORTD.IN & 0b00000001)
 59e:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
 5a2:	80 ff       	sbrs	r24, 0
 5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <__vector_64+0x24>
		TCC1.PER = 10000;
 5a6:	80 e1       	ldi	r24, 0x10	; 16
 5a8:	97 e2       	ldi	r25, 0x27	; 39
 5aa:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
 5ae:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <__vector_64+0x30>
	else TCC1.PER = 2000;
 5b4:	80 ed       	ldi	r24, 0xD0	; 208
 5b6:	97 e0       	ldi	r25, 0x07	; 7
 5b8:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
 5bc:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>

	
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <Print_changeColor>:
	print_textBuffer[i] = 0;
}

void Print_changeColor( void )
{
		if(print_CharacterRedVal == 255){
 5ce:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <print_CharacterRedVal>
 5d2:	8f 3f       	cpi	r24, 0xFF	; 255
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <Print_changeColor+0x12>
			print_CharacterGreenVal = 255;
 5d6:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <print_CharacterGreenVal>
			print_CharacterRedVal = 0;
 5da:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <print_CharacterRedVal>
 5de:	08 95       	ret
		}
		else if(print_CharacterGreenVal == 255){
 5e0:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <print_CharacterGreenVal>
 5e4:	8f 3f       	cpi	r24, 0xFF	; 255
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <Print_changeColor+0x24>
			print_CharacterBlueVal = 255;
 5e8:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <print_CharacterBlueVal>
			print_CharacterGreenVal = 0;
 5ec:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <print_CharacterGreenVal>
 5f0:	08 95       	ret
		}
		else if(print_CharacterBlueVal == 255){
 5f2:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <print_CharacterBlueVal>
 5f6:	8f 3f       	cpi	r24, 0xFF	; 255
 5f8:	29 f4       	brne	.+10     	; 0x604 <Print_changeColor+0x36>
			print_CharacterRedVal = 255;
 5fa:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <print_CharacterRedVal>
			print_CharacterBlueVal = 0;
 5fe:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <print_CharacterBlueVal>
 602:	08 95       	ret
		}
		else print_CharacterRedVal = 255;
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <print_CharacterRedVal>
 60a:	08 95       	ret

0000060c <Print_outputBuffer>:
	
}


void Print_outputBuffer(void)
{
 60c:	cf 92       	push	r12
 60e:	df 92       	push	r13
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	0f 2e       	mov	r0, r31
 61e:	fd ec       	ldi	r31, 0xCD	; 205
 620:	ef 2e       	mov	r14, r31
 622:	f0 e2       	ldi	r31, 0x20	; 32
 624:	ff 2e       	mov	r15, r31
 626:	f0 2d       	mov	r31, r0
	uint8_t rowCounter = 0;
 628:	d1 2c       	mov	r13, r1
 62a:	3c c0       	rjmp	.+120    	; 0x6a4 <Print_outputBuffer+0x98>
	for ( uint8_t i = 0 ; i < 8 ; ++i)
	{
		for ( uint8_t j = 0 ; j < 8 ; ++j)
		{
			if ( print_textBuffer[i] & ( 1 << j ) )
 62c:	f7 01       	movw	r30, r14
 62e:	80 81       	ld	r24, Z
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	00 2e       	mov	r0, r16
 634:	02 c0       	rjmp	.+4      	; 0x63a <Print_outputBuffer+0x2e>
 636:	95 95       	asr	r25
 638:	87 95       	ror	r24
 63a:	0a 94       	dec	r0
 63c:	e2 f7       	brpl	.-8      	; 0x636 <Print_outputBuffer+0x2a>
 63e:	80 ff       	sbrs	r24, 0
 640:	13 c0       	rjmp	.+38     	; 0x668 <Print_outputBuffer+0x5c>
			{
				Display_setChannelBrightness(rowCounter,	j*3,		print_CharacterRedVal);
 642:	40 91 c4 20 	lds	r20, 0x20C4	; 0x8020c4 <print_CharacterRedVal>
 646:	6d 2f       	mov	r22, r29
 648:	8d 2d       	mov	r24, r13
 64a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display_setChannelBrightness>
				Display_setChannelBrightness(rowCounter,	j*3 + 1,	print_CharacterGreenVal);
 64e:	40 91 c0 20 	lds	r20, 0x20C0	; 0x8020c0 <print_CharacterGreenVal>
 652:	6c 2f       	mov	r22, r28
 654:	8d 2d       	mov	r24, r13
 656:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display_setChannelBrightness>
				Display_setChannelBrightness(rowCounter,	j*3 + 2,	print_CharacterBlueVal);
 65a:	40 91 c5 20 	lds	r20, 0x20C5	; 0x8020c5 <print_CharacterBlueVal>
 65e:	6c 2d       	mov	r22, r12
 660:	8d 2d       	mov	r24, r13
 662:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display_setChannelBrightness>
 666:	0f c0       	rjmp	.+30     	; 0x686 <Print_outputBuffer+0x7a>
			}
			else{
				Display_setChannelBrightness(rowCounter,	j*3,		0);
 668:	40 e0       	ldi	r20, 0x00	; 0
 66a:	6d 2f       	mov	r22, r29
 66c:	8d 2d       	mov	r24, r13
 66e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display_setChannelBrightness>
				Display_setChannelBrightness(rowCounter,	j*3 + 1,	0);
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	6c 2f       	mov	r22, r28
 676:	8d 2d       	mov	r24, r13
 678:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display_setChannelBrightness>
				Display_setChannelBrightness(rowCounter,	j*3 + 2,	0);
 67c:	40 e0       	ldi	r20, 0x00	; 0
 67e:	6c 2d       	mov	r22, r12
 680:	8d 2d       	mov	r24, r13
 682:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display_setChannelBrightness>
 686:	0f 5f       	subi	r16, 0xFF	; 255
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	dd 5f       	subi	r29, 0xFD	; 253
 68c:	cd 5f       	subi	r28, 0xFD	; 253
 68e:	f3 e0       	ldi	r31, 0x03	; 3
 690:	cf 0e       	add	r12, r31
void Print_outputBuffer(void)
{
	uint8_t rowCounter = 0;
	for ( uint8_t i = 0 ; i < 8 ; ++i)
	{
		for ( uint8_t j = 0 ; j < 8 ; ++j)
 692:	c9 31       	cpi	r28, 0x19	; 25
 694:	59 f6       	brne	.-106    	; 0x62c <Print_outputBuffer+0x20>
				Display_setChannelBrightness(rowCounter,	j*3,		0);
				Display_setChannelBrightness(rowCounter,	j*3 + 1,	0);
				Display_setChannelBrightness(rowCounter,	j*3 + 2,	0);
			}
		}
		rowCounter++;
 696:	d3 94       	inc	r13
 698:	8f ef       	ldi	r24, 0xFF	; 255
 69a:	e8 1a       	sub	r14, r24
 69c:	f8 0a       	sbc	r15, r24


void Print_outputBuffer(void)
{
	uint8_t rowCounter = 0;
	for ( uint8_t i = 0 ; i < 8 ; ++i)
 69e:	e8 e0       	ldi	r30, 0x08	; 8
 6a0:	de 16       	cp	r13, r30
 6a2:	41 f0       	breq	.+16     	; 0x6b4 <Print_outputBuffer+0xa8>
	
}


void Print_outputBuffer(void)
{
 6a4:	68 94       	set
 6a6:	cc 24       	eor	r12, r12
 6a8:	c1 f8       	bld	r12, 1
 6aa:	c1 e0       	ldi	r28, 0x01	; 1
 6ac:	d0 e0       	ldi	r29, 0x00	; 0
 6ae:	00 e0       	ldi	r16, 0x00	; 0
 6b0:	10 e0       	ldi	r17, 0x00	; 0
 6b2:	bc cf       	rjmp	.-136    	; 0x62c <Print_outputBuffer+0x20>
				Display_setChannelBrightness(rowCounter,	j*3 + 2,	0);
			}
		}
		rowCounter++;
	}
}
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	ff 90       	pop	r15
 6be:	ef 90       	pop	r14
 6c0:	df 90       	pop	r13
 6c2:	cf 90       	pop	r12
 6c4:	08 95       	ret

000006c6 <Print_character>:
{
	static uint16_t frame_counter = 0;
	uint8_t counter = 0;
	for ( uint8_t i = 0; i < 8 ; ++i)
	{
		print_textBuffer[i] = pgm_read_byte ( & ( IMAGES[frame_counter][counter++] ) );
 6c6:	40 91 c2 20 	lds	r20, 0x20C2	; 0x8020c2 <__data_end>
 6ca:	50 91 c3 20 	lds	r21, 0x20C3	; 0x8020c3 <__data_end+0x1>
 6ce:	fa 01       	movw	r30, r20
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	e4 50       	subi	r30, 0x04	; 4
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	ad ec       	ldi	r26, 0xCD	; 205
 6e2:	b0 e2       	ldi	r27, 0x20	; 32
 6e4:	25 ed       	ldi	r18, 0xD5	; 213
 6e6:	30 e2       	ldi	r19, 0x20	; 32
 6e8:	84 91       	lpm	r24, Z
 6ea:	8d 93       	st	X+, r24
 6ec:	31 96       	adiw	r30, 0x01	; 1

void Print_character(void)
{
	static uint16_t frame_counter = 0;
	uint8_t counter = 0;
	for ( uint8_t i = 0; i < 8 ; ++i)
 6ee:	a2 17       	cp	r26, r18
 6f0:	b3 07       	cpc	r27, r19
 6f2:	d1 f7       	brne	.-12     	; 0x6e8 <Print_character+0x22>
	{
		print_textBuffer[i] = pgm_read_byte ( & ( IMAGES[frame_counter][counter++] ) );
	}
	++frame_counter;
 6f4:	4f 5f       	subi	r20, 0xFF	; 255
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
	if(frame_counter == 19){
 6f8:	43 31       	cpi	r20, 0x13	; 19
 6fa:	51 05       	cpc	r21, r1
 6fc:	29 f0       	breq	.+10     	; 0x708 <Print_character+0x42>
	uint8_t counter = 0;
	for ( uint8_t i = 0; i < 8 ; ++i)
	{
		print_textBuffer[i] = pgm_read_byte ( & ( IMAGES[frame_counter][counter++] ) );
	}
	++frame_counter;
 6fe:	40 93 c2 20 	sts	0x20C2, r20	; 0x8020c2 <__data_end>
 702:	50 93 c3 20 	sts	0x20C3, r21	; 0x8020c3 <__data_end+0x1>
 706:	08 95       	ret
	if(frame_counter == 19){
		frame_counter = 0;
 708:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <__data_end>
 70c:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <__data_end+0x1>
		Print_changeColor();
 710:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Print_changeColor>
 714:	08 95       	ret

00000716 <SPI_init>:
#include "Display.h"
#include "ProgmemData.h"


void SPI_init(void){
	PORTC.DIRSET |= 1 << 0; //Latch pin for TLC5947
 716:	e0 e4       	ldi	r30, 0x40	; 64
 718:	f6 e0       	ldi	r31, 0x06	; 6
 71a:	81 81       	ldd	r24, Z+1	; 0x01
 71c:	81 60       	ori	r24, 0x01	; 1
 71e:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 720:	81 81       	ldd	r24, Z+1	; 0x01
 722:	82 60       	ori	r24, 0x02	; 2
 724:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 7; //SCK pin for TLC5947
 726:	81 81       	ldd	r24, Z+1	; 0x01
 728:	80 68       	ori	r24, 0x80	; 128
 72a:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 72c:	81 81       	ldd	r24, Z+1	; 0x01
 72e:	80 62       	ori	r24, 0x20	; 32
 730:	81 83       	std	Z+1, r24	; 0x01


	PORTC.PIN4CTRL |= PORT_OPC_PULLUP_gc;
 732:	84 89       	ldd	r24, Z+20	; 0x14
 734:	88 61       	ori	r24, 0x18	; 24
 736:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.DIRSET |= 1 << 4; //Slave select
 738:	81 81       	ldd	r24, Z+1	; 0x01
 73a:	80 61       	ori	r24, 0x10	; 16
 73c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= 1 << 4; //Slave select HIGH
 73e:	85 81       	ldd	r24, Z+5	; 0x05
 740:	80 61       	ori	r24, 0x10	; 16
 742:	85 83       	std	Z+5, r24	; 0x05
	

	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV128_gc | SPI_CLK2X_bm;
 744:	a0 ec       	ldi	r26, 0xC0	; 192
 746:	b8 e0       	ldi	r27, 0x08	; 8
 748:	8c 91       	ld	r24, X
 74a:	83 6d       	ori	r24, 0xD3	; 211
 74c:	8c 93       	st	X, r24
	SPIC.INTCTRL |= SPI_INTLVL_LO_gc;
 74e:	11 96       	adiw	r26, 0x01	; 1
 750:	8c 91       	ld	r24, X
 752:	11 97       	sbiw	r26, 0x01	; 1
 754:	81 60       	ori	r24, 0x01	; 1
 756:	11 96       	adiw	r26, 0x01	; 1
 758:	8c 93       	st	X, r24
	
	PORTC.OUTCLR |= 1 << 0;
 75a:	86 81       	ldd	r24, Z+6	; 0x06
 75c:	81 60       	ori	r24, 0x01	; 1
 75e:	86 83       	std	Z+6, r24	; 0x06
 760:	08 95       	ret

00000762 <SPI_update>:
}

void SPI_update(void){
	SPIC.INTCTRL |= SPI_INTLVL_MED_gc; // interrupt level for SPIC set to medium
 762:	e0 ec       	ldi	r30, 0xC0	; 192
 764:	f8 e0       	ldi	r31, 0x08	; 8
 766:	81 81       	ldd	r24, Z+1	; 0x01
 768:	82 60       	ori	r24, 0x02	; 2
 76a:	81 83       	std	Z+1, r24	; 0x01
 76c:	08 95       	ret

0000076e <SPI_blankAndLatch>:
}

void SPI_blankAndLatch(void){
	PORTC.OUTSET |= 1 << 0 | 1<<1;
 76e:	e0 e4       	ldi	r30, 0x40	; 64
 770:	f6 e0       	ldi	r31, 0x06	; 6
 772:	85 81       	ldd	r24, Z+5	; 0x05
 774:	83 60       	ori	r24, 0x03	; 3
 776:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR |= 1 << 0;
 778:	86 81       	ldd	r24, Z+6	; 0x06
 77a:	81 60       	ori	r24, 0x01	; 1
 77c:	86 83       	std	Z+6, r24	; 0x06
 77e:	08 95       	ret

00000780 <__vector_24>:
}

ISR ( SPIC_INT_vect )
{
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	11 24       	eor	r1, r1
 78a:	0b b6       	in	r0, 0x3b	; 59
 78c:	0f 92       	push	r0
 78e:	2f 93       	push	r18
 790:	3f 93       	push	r19
 792:	4f 93       	push	r20
 794:	5f 93       	push	r21
 796:	6f 93       	push	r22
 798:	7f 93       	push	r23
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	af 93       	push	r26
 7a0:	bf 93       	push	r27
 7a2:	ef 93       	push	r30
 7a4:	ff 93       	push	r31
	The data is sent in batches of two 12bits variables, divided into three 8bits variables. ( 12*2 == 8*3 )
	The sending of the two 12bits variables are divided into three actions, each one choosing the appropriate bits
	to put into the 8bit variable c, which is transmitted once the switch ends.
*/
	
	switch ( _8bytesSent % 3 )			
 7a6:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <_8bytesSent.4618>
 7aa:	8b ea       	ldi	r24, 0xAB	; 171
 7ac:	98 9f       	mul	r25, r24
 7ae:	81 2d       	mov	r24, r1
 7b0:	11 24       	eor	r1, r1
 7b2:	86 95       	lsr	r24
 7b4:	28 2f       	mov	r18, r24
 7b6:	22 0f       	add	r18, r18
 7b8:	82 0f       	add	r24, r18
 7ba:	98 1b       	sub	r25, r24
 7bc:	91 30       	cpi	r25, 0x01	; 1
 7be:	01 f1       	breq	.+64     	; 0x800 <__vector_24+0x80>
 7c0:	20 f0       	brcs	.+8      	; 0x7ca <__vector_24+0x4a>
 7c2:	92 30       	cpi	r25, 0x02	; 2
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <__vector_24+0x48>
 7c6:	3a c0       	rjmp	.+116    	; 0x83c <__vector_24+0xbc>
 7c8:	41 c0       	rjmp	.+130    	; 0x84c <__vector_24+0xcc>
	{
		case ( 0 ):
			first12Bits = pgm_read_word(  & (  BrightnessLookUpTable[Display_getChannelBrightness(row,23-_12bytesSent)] ) );
 7ca:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <_12bytesSent.4617>
 7ce:	67 e1       	ldi	r22, 0x17	; 23
 7d0:	68 1b       	sub	r22, r24
 7d2:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <row.4619>
 7d6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Display_getChannelBrightness>
 7da:	e8 2f       	mov	r30, r24
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	ee 0f       	add	r30, r30
 7e0:	ff 1f       	adc	r31, r31
 7e2:	ec 56       	subi	r30, 0x6C	; 108
 7e4:	fd 4f       	sbci	r31, 0xFD	; 253
 7e6:	85 91       	lpm	r24, Z+
 7e8:	94 91       	lpm	r25, Z
 7ea:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <first12Bits.4620>
 7ee:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <first12Bits.4620+0x1>
			c = ( uint8_t ) (first12Bits >> 4);
 7f2:	92 95       	swap	r25
 7f4:	82 95       	swap	r24
 7f6:	8f 70       	andi	r24, 0x0F	; 15
 7f8:	89 27       	eor	r24, r25
 7fa:	9f 70       	andi	r25, 0x0F	; 15
 7fc:	89 27       	eor	r24, r25
			
			break;
 7fe:	27 c0       	rjmp	.+78     	; 0x84e <__vector_24+0xce>

		case( 1 ):
			++_12bytesSent;
 800:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <_12bytesSent.4617>
 804:	8f 5f       	subi	r24, 0xFF	; 255
 806:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <_12bytesSent.4617>
			second12Bits = pgm_read_word(  & (   BrightnessLookUpTable[Display_getChannelBrightness(row,23-_12bytesSent)]) );
 80a:	67 e1       	ldi	r22, 0x17	; 23
 80c:	68 1b       	sub	r22, r24
 80e:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <row.4619>
 812:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Display_getChannelBrightness>
 816:	e8 2f       	mov	r30, r24
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	ee 0f       	add	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	ec 56       	subi	r30, 0x6C	; 108
 820:	fd 4f       	sbci	r31, 0xFD	; 253
 822:	85 91       	lpm	r24, Z+
 824:	94 91       	lpm	r25, Z
 826:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <second12Bits.4621>
 82a:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <second12Bits.4621+0x1>
			c = (uint8_t) ( first12Bits << 4 );
 82e:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <first12Bits.4620>
 832:	82 95       	swap	r24
 834:	80 7f       	andi	r24, 0xF0	; 240
			MSB_filter_var = ((uint8_t) ( second12Bits >> 8 ))  & 0x0F;
			c |= MSB_filter_var;
 836:	9f 70       	andi	r25, 0x0F	; 15
 838:	89 2b       	or	r24, r25

			break;
 83a:	09 c0       	rjmp	.+18     	; 0x84e <__vector_24+0xce>
			
		case( 2 ):
		
			c = (uint8_t) second12Bits;
 83c:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <second12Bits.4621>
			_12bytesSent++;
 840:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <_12bytesSent.4617>
 844:	9f 5f       	subi	r25, 0xFF	; 255
 846:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <_12bytesSent.4617>
			break;	
 84a:	01 c0       	rjmp	.+2      	; 0x84e <__vector_24+0xce>
	static uint8_t		row				= 0;
	
	static uint16_t		first12Bits		= 0;
	static uint16_t		second12Bits	= 0;
	
	uint8_t				c				= 0;
 84c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		
		}
		
		SPIC.DATA = c;                  // send data
 84e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
		_8bytesSent++;
 852:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <_8bytesSent.4618>
 856:	8f 5f       	subi	r24, 0xFF	; 255
 858:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <_8bytesSent.4618>
		
		if ( _12bytesSent >= 24  || _8bytesSent >= 36 )					// if reached end
 85c:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <_12bytesSent.4617>
 860:	98 31       	cpi	r25, 0x18	; 24
 862:	10 f4       	brcc	.+4      	; 0x868 <__vector_24+0xe8>
 864:	84 32       	cpi	r24, 0x24	; 36
 866:	c8 f1       	brcs	.+114    	; 0x8da <__vector_24+0x15a>
		{
			while(!(SPIC_STATUS & SPI_IF_bm)){}
 868:	e2 ec       	ldi	r30, 0xC2	; 194
 86a:	f8 e0       	ldi	r31, 0x08	; 8
 86c:	80 81       	ld	r24, Z
 86e:	88 23       	and	r24, r24
 870:	ec f7       	brge	.-6      	; 0x86c <__vector_24+0xec>
			SPI_blankAndLatch();
 872:	0e 94 b7 03 	call	0x76e	; 0x76e <SPI_blankAndLatch>
			
			SPIC.INTCTRL	&=		~( ( 1 << 0 ) | ( 1 << 1 ) );		// turn off interrupts
 876:	e0 ec       	ldi	r30, 0xC0	; 192
 878:	f8 e0       	ldi	r31, 0x08	; 8
 87a:	81 81       	ldd	r24, Z+1	; 0x01
 87c:	8c 7f       	andi	r24, 0xFC	; 252
 87e:	81 83       	std	Z+1, r24	; 0x01
			_12bytesSent	=		0;
 880:	10 92 cb 20 	sts	0x20CB, r1	; 0x8020cb <_12bytesSent.4617>
			_8bytesSent		=		0;
 884:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <_8bytesSent.4618>
			
			if(row > 7){
 888:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <row.4619>
 88c:	88 30       	cpi	r24, 0x08	; 8
 88e:	30 f0       	brcs	.+12     	; 0x89c <__vector_24+0x11c>
				row = 0;
 890:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <row.4619>
				PORTA.OUT = (1<<0);
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 89a:	19 c0       	rjmp	.+50     	; 0x8ce <__vector_24+0x14e>
			}
			else if (row == 0) PORTA.OUT = (1<<0);
 89c:	81 11       	cpse	r24, r1
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__vector_24+0x128>
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 8a6:	13 c0       	rjmp	.+38     	; 0x8ce <__vector_24+0x14e>
			else PORTA.OUT= PORTA.OUT << 1;
 8a8:	e0 e0       	ldi	r30, 0x00	; 0
 8aa:	f6 e0       	ldi	r31, 0x06	; 6
 8ac:	94 81       	ldd	r25, Z+4	; 0x04
 8ae:	99 0f       	add	r25, r25
 8b0:	94 83       	std	Z+4, r25	; 0x04
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 8b2:	8f 5f       	subi	r24, 0xFF	; 255
			if(row == 8)
 8b4:	88 30       	cpi	r24, 0x08	; 8
 8b6:	19 f0       	breq	.+6      	; 0x8be <__vector_24+0x13e>
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 8b8:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <row.4619>
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__vector_24+0x142>
			if(row == 8)
				row = 0;
 8be:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <row.4619>
			PORTC.OUTCLR |= 1<<1;	
 8c2:	e0 e4       	ldi	r30, 0x40	; 64
 8c4:	f6 e0       	ldi	r31, 0x06	; 6
 8c6:	86 81       	ldd	r24, Z+6	; 0x06
 8c8:	82 60       	ori	r24, 0x02	; 2
 8ca:	86 83       	std	Z+6, r24	; 0x06
		}	
}
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <__vector_24+0x15a>
				break;
				case(7):
				PORTA.OUT = 0b10000000;
				break;
			}*/
			row++;
 8ce:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <row.4619>
 8d2:	8f 5f       	subi	r24, 0xFF	; 255
 8d4:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <row.4619>
 8d8:	f4 cf       	rjmp	.-24     	; 0x8c2 <__vector_24+0x142>
			if(row == 8)
				row = 0;
			PORTC.OUTCLR |= 1<<1;	
		}	
}
 8da:	ff 91       	pop	r31
 8dc:	ef 91       	pop	r30
 8de:	bf 91       	pop	r27
 8e0:	af 91       	pop	r26
 8e2:	9f 91       	pop	r25
 8e4:	8f 91       	pop	r24
 8e6:	7f 91       	pop	r23
 8e8:	6f 91       	pop	r22
 8ea:	5f 91       	pop	r21
 8ec:	4f 91       	pop	r20
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	0b be       	out	0x3b, r0	; 59
 8f6:	0f 90       	pop	r0
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	0f 90       	pop	r0
 8fc:	1f 90       	pop	r1
 8fe:	18 95       	reti

00000900 <Timer0_init>:
#include "Display.h"
#include "Print.h"

void Timer0_init(void)
{
	TCC0.CTRLA = 0b00000011; //PRESCALER CLK_DIV4
 900:	e0 e0       	ldi	r30, 0x00	; 0
 902:	f8 e0       	ldi	r31, 0x08	; 8
 904:	83 e0       	ldi	r24, 0x03	; 3
 906:	80 83       	st	Z, r24
	TCC0.INTCTRLA = 0b00000011; //Interrupt level HIGH
 908:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 4000;
 90a:	80 ea       	ldi	r24, 0xA0	; 160
 90c:	9f e0       	ldi	r25, 0x0F	; 15
 90e:	86 a3       	std	Z+38, r24	; 0x26
 910:	97 a3       	std	Z+39, r25	; 0x27
 912:	08 95       	ret

00000914 <Timer1_init>:
}
/*		Timer 0 is used for the periodic update of the Display		*/

void Timer1_init(void)
{
	TCC1.CTRLA = 0b00000111; //PRESCALER CLK_DIV1024
 914:	e0 e4       	ldi	r30, 0x40	; 64
 916:	f8 e0       	ldi	r31, 0x08	; 8
 918:	87 e0       	ldi	r24, 0x07	; 7
 91a:	80 83       	st	Z, r24
	TCC1.INTCTRLA = 0b00000001; //Interrupt level LOW
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	86 83       	std	Z+6, r24	; 0x06
	TCC1.PER = 20000;
 920:	80 e2       	ldi	r24, 0x20	; 32
 922:	9e e4       	ldi	r25, 0x4E	; 78
 924:	86 a3       	std	Z+38, r24	; 0x26
 926:	97 a3       	std	Z+39, r25	; 0x27
 928:	08 95       	ret

0000092a <__vector_14>:
}
/*		Timer 1		*/

ISR ( TCC0_OVF_vect )
{
 92a:	1f 92       	push	r1
 92c:	0f 92       	push	r0
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	0f 92       	push	r0
 932:	11 24       	eor	r1, r1
 934:	0b b6       	in	r0, 0x3b	; 59
 936:	0f 92       	push	r0
 938:	2f 93       	push	r18
 93a:	3f 93       	push	r19
 93c:	4f 93       	push	r20
 93e:	5f 93       	push	r21
 940:	6f 93       	push	r22
 942:	7f 93       	push	r23
 944:	8f 93       	push	r24
 946:	9f 93       	push	r25
 948:	af 93       	push	r26
 94a:	bf 93       	push	r27
 94c:	ef 93       	push	r30
 94e:	ff 93       	push	r31
	SPI_update();
 950:	0e 94 b1 03 	call	0x762	; 0x762 <SPI_update>
}
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	bf 91       	pop	r27
 95a:	af 91       	pop	r26
 95c:	9f 91       	pop	r25
 95e:	8f 91       	pop	r24
 960:	7f 91       	pop	r23
 962:	6f 91       	pop	r22
 964:	5f 91       	pop	r21
 966:	4f 91       	pop	r20
 968:	3f 91       	pop	r19
 96a:	2f 91       	pop	r18
 96c:	0f 90       	pop	r0
 96e:	0b be       	out	0x3b, r0	; 59
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <__vector_20>:

ISR ( TCC1_OVF_vect )
{
 97a:	1f 92       	push	r1
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1
 984:	0b b6       	in	r0, 0x3b	; 59
 986:	0f 92       	push	r0
 988:	2f 93       	push	r18
 98a:	3f 93       	push	r19
 98c:	4f 93       	push	r20
 98e:	5f 93       	push	r21
 990:	6f 93       	push	r22
 992:	7f 93       	push	r23
 994:	8f 93       	push	r24
 996:	9f 93       	push	r25
 998:	af 93       	push	r26
 99a:	bf 93       	push	r27
 99c:	ef 93       	push	r30
 99e:	ff 93       	push	r31
	//Print_changeColor();
	//Display_clear();
	Print_character();
 9a0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Print_character>
	Print_outputBuffer();
 9a4:	0e 94 06 03 	call	0x60c	; 0x60c <Print_outputBuffer>
	
}
 9a8:	ff 91       	pop	r31
 9aa:	ef 91       	pop	r30
 9ac:	bf 91       	pop	r27
 9ae:	af 91       	pop	r26
 9b0:	9f 91       	pop	r25
 9b2:	8f 91       	pop	r24
 9b4:	7f 91       	pop	r23
 9b6:	6f 91       	pop	r22
 9b8:	5f 91       	pop	r21
 9ba:	4f 91       	pop	r20
 9bc:	3f 91       	pop	r19
 9be:	2f 91       	pop	r18
 9c0:	0f 90       	pop	r0
 9c2:	0b be       	out	0x3b, r0	; 59
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <_exit>:
 9ce:	f8 94       	cli

000009d0 <__stop_program>:
 9d0:	ff cf       	rjmp	.-2      	; 0x9d0 <__stop_program>
