
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802000  00802000  00000510  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003806  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002942  00000000  00000000  00003e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085d  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00006fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002390  00000000  00000000  000070fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024d  00000000  00000000  0000948c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000096d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
   8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
   c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  2c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  34:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  38:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_14>
  3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  50:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  54:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  60:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_24>
  64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  70:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  74:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  78:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  7c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  80:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  84:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  88:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  8c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  90:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  94:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  98:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  9c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  ac:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  bc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  cc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  dc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  ec:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  fc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 100:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 104:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 108:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 10c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 110:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 114:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 118:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 11c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 120:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 124:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 128:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 12c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 130:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 134:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 138:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 13c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 140:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 144:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 148:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 14c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 150:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 154:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 158:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 15c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 160:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 164:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 168:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 16c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 170:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 174:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 178:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 17c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 180:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 184:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 188:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 18c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 190:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 194:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 198:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 19c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1ac:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1bc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1cc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1dc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1ec:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	ec e9       	ldi	r30, 0x9C	; 156
 210:	f4 e0       	ldi	r31, 0x04	; 4
 212:	00 e0       	ldi	r16, 0x00	; 0
 214:	0b bf       	out	0x3b, r16	; 59
 216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
 218:	07 90       	elpm	r0, Z+
 21a:	0d 92       	st	X+, r0
 21c:	a0 30       	cpi	r26, 0x00	; 0
 21e:	b1 07       	cpc	r27, r17
 220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
 222:	20 e2       	ldi	r18, 0x20	; 32
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	b0 e2       	ldi	r27, 0x20	; 32
 228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
 22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
 22c:	a7 30       	cpi	r26, 0x07	; 7
 22e:	b2 07       	cpc	r27, r18
 230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
 232:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
 236:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

0000023a <__bad_interrupt>:
 23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <clock_init>:
		_delay_us(50);*/
    }
}

void clock_init(){
	OSC.CTRL |= OSC_RC32MEN_bm;
 23e:	e0 e5       	ldi	r30, 0x50	; 80
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	81 ff       	sbrs	r24, 1
 24c:	fd cf       	rjmp	.-6      	; 0x248 <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC32M_gc);
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	88 ed       	ldi	r24, 0xD8	; 216
 252:	84 bf       	out	0x34, r24	; 52
 254:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 258:	08 95       	ret

0000025a <main>:

void clock_init(void);

int main(void)
{
	clock_init();
 25a:	0e 94 1f 01 	call	0x23e	; 0x23e <clock_init>
	SPI_init();
 25e:	0e 94 42 01 	call	0x284	; 0x284 <SPI_init>
	Timer0_init();
 262:	0e 94 1a 02 	call	0x434	; 0x434 <Timer0_init>
	
	sei();
 266:	78 94       	sei
	PMIC.CTRL |= 7; //all interrupt levels are enabled
 268:	e0 ea       	ldi	r30, 0xA0	; 160
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	82 81       	ldd	r24, Z+2	; 0x02
 26e:	87 60       	ori	r24, 0x07	; 7
 270:	82 83       	std	Z+2, r24	; 0x02
	
	
	PORTA.DIRSET = 0b11111111; //ROW2
 272:	e0 e0       	ldi	r30, 0x00	; 0
 274:	f6 e0       	ldi	r31, 0x06	; 6
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0b00000001; //ROW2
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	85 83       	std	Z+5, r24	; 0x05
	SPIC.DATA = 0b00000000;
 27e:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 282:	ff cf       	rjmp	.-2      	; 0x282 <main+0x28>

00000284 <SPI_init>:
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};


void SPI_init(void){
	PORTC.DIRSET |= 1 << 0; //Latch pin for TLC5947
 284:	e0 e4       	ldi	r30, 0x40	; 64
 286:	f6 e0       	ldi	r31, 0x06	; 6
 288:	81 81       	ldd	r24, Z+1	; 0x01
 28a:	81 60       	ori	r24, 0x01	; 1
 28c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 28e:	81 81       	ldd	r24, Z+1	; 0x01
 290:	82 60       	ori	r24, 0x02	; 2
 292:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 7; //SCK pin for TLC5947
 294:	81 81       	ldd	r24, Z+1	; 0x01
 296:	80 68       	ori	r24, 0x80	; 128
 298:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 29a:	81 81       	ldd	r24, Z+1	; 0x01
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	81 83       	std	Z+1, r24	; 0x01


	PORTC.PIN4CTRL |= PORT_OPC_PULLUP_gc;
 2a0:	84 89       	ldd	r24, Z+20	; 0x14
 2a2:	88 61       	ori	r24, 0x18	; 24
 2a4:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.DIRSET |= 1 << 4; //Slave select
 2a6:	81 81       	ldd	r24, Z+1	; 0x01
 2a8:	80 61       	ori	r24, 0x10	; 16
 2aa:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= 1 << 4; //Slave select HIGH
 2ac:	85 81       	ldd	r24, Z+5	; 0x05
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	85 83       	std	Z+5, r24	; 0x05
	

	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV128_gc | SPI_CLK2X_bm;
 2b2:	a0 ec       	ldi	r26, 0xC0	; 192
 2b4:	b8 e0       	ldi	r27, 0x08	; 8
 2b6:	8c 91       	ld	r24, X
 2b8:	83 6d       	ori	r24, 0xD3	; 211
 2ba:	8c 93       	st	X, r24
	SPIC.INTCTRL |= SPI_INTLVL_LO_gc;
 2bc:	11 96       	adiw	r26, 0x01	; 1
 2be:	8c 91       	ld	r24, X
 2c0:	11 97       	sbiw	r26, 0x01	; 1
 2c2:	81 60       	ori	r24, 0x01	; 1
 2c4:	11 96       	adiw	r26, 0x01	; 1
 2c6:	8c 93       	st	X, r24
	//SPIC.INTCTRL |= SPI_INTLVL_OFF_gc;
	
	PORTC.OUTCLR |= 1 << 0;
 2c8:	86 81       	ldd	r24, Z+6	; 0x06
 2ca:	81 60       	ori	r24, 0x01	; 1
 2cc:	86 83       	std	Z+6, r24	; 0x06
 2ce:	08 95       	ret

000002d0 <SPI_update>:
}

void SPI_update(void){
	SPIC.INTCTRL |= SPI_INTLVL_MED_gc; // interrupt level for SPIC set to medium
 2d0:	e0 ec       	ldi	r30, 0xC0	; 192
 2d2:	f8 e0       	ldi	r31, 0x08	; 8
 2d4:	81 81       	ldd	r24, Z+1	; 0x01
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	81 83       	std	Z+1, r24	; 0x01
 2da:	08 95       	ret

000002dc <SPI_blankAndLatch>:
}

void SPI_blankAndLatch(void){
	PORTC.OUTSET |= 1 << 0 | 1<<1;
 2dc:	e0 e4       	ldi	r30, 0x40	; 64
 2de:	f6 e0       	ldi	r31, 0x06	; 6
 2e0:	85 81       	ldd	r24, Z+5	; 0x05
 2e2:	83 60       	ori	r24, 0x03	; 3
 2e4:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR |= 1 << 0 | 1<<1;
 2e6:	86 81       	ldd	r24, Z+6	; 0x06
 2e8:	83 60       	ori	r24, 0x03	; 3
 2ea:	86 83       	std	Z+6, r24	; 0x06
 2ec:	08 95       	ret

000002ee <__vector_24>:
}

ISR ( SPIC_INT_vect )
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	0b b6       	in	r0, 0x3b	; 59
 2fa:	0f 92       	push	r0
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	The data is sent in batches of two 12bits variables, divided into three 8bits variables. ( 12*2 == 8*3 )
	The sending of the two 12bits variables are divied into three actions, each one choosing the appropriate bits
	to put into the 8bit variable c, which is transmitted once the switch ends.
*/
	
	switch ( _8bytesSent % 3 )			
 314:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <_8bytesSent.4605>
 318:	8b ea       	ldi	r24, 0xAB	; 171
 31a:	98 9f       	mul	r25, r24
 31c:	81 2d       	mov	r24, r1
 31e:	11 24       	eor	r1, r1
 320:	86 95       	lsr	r24
 322:	28 2f       	mov	r18, r24
 324:	22 0f       	add	r18, r18
 326:	82 0f       	add	r24, r18
 328:	29 2f       	mov	r18, r25
 32a:	28 1b       	sub	r18, r24
 32c:	21 30       	cpi	r18, 0x01	; 1
 32e:	f1 f0       	breq	.+60     	; 0x36c <__vector_24+0x7e>
 330:	18 f0       	brcs	.+6      	; 0x338 <__vector_24+0x4a>
 332:	22 30       	cpi	r18, 0x02	; 2
 334:	c9 f1       	breq	.+114    	; 0x3a8 <__vector_24+0xba>
 336:	40 c0       	rjmp	.+128    	; 0x3b8 <__vector_24+0xca>
	{
		case ( 0 ):
			if(row == 0)
 338:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <row.4606>
 33c:	81 11       	cpse	r24, r1
 33e:	07 c0       	rjmp	.+14     	; 0x34e <__vector_24+0x60>
				first12Bits = 0b11111111;
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	20 93 03 20 	sts	0x2003, r18	; 0x802003 <first12Bits.4607>
 348:	30 93 04 20 	sts	0x2004, r19	; 0x802004 <first12Bits.4607+0x1>
 34c:	04 c0       	rjmp	.+8      	; 0x356 <__vector_24+0x68>
			else first12Bits = 0b00000000;
 34e:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <first12Bits.4607>
 352:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <first12Bits.4607+0x1>
			c = ( uint8_t ) (first12Bits >> 4);
 356:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <first12Bits.4607>
 35a:	30 91 04 20 	lds	r19, 0x2004	; 0x802004 <first12Bits.4607+0x1>
 35e:	32 95       	swap	r19
 360:	22 95       	swap	r18
 362:	2f 70       	andi	r18, 0x0F	; 15
 364:	23 27       	eor	r18, r19
 366:	3f 70       	andi	r19, 0x0F	; 15
 368:	23 27       	eor	r18, r19
			
			break;
 36a:	27 c0       	rjmp	.+78     	; 0x3ba <__vector_24+0xcc>
	
		// case 0: read out the 16bits value from the lookupTable. Send MSB
	

		case( 1 ):
			if(row == 0)
 36c:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <row.4606>
 370:	81 11       	cpse	r24, r1
 372:	07 c0       	rjmp	.+14     	; 0x382 <__vector_24+0x94>
				second12Bits = 0b11111111;
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	20 93 01 20 	sts	0x2001, r18	; 0x802001 <second12Bits.4608>
 37c:	30 93 02 20 	sts	0x2002, r19	; 0x802002 <second12Bits.4608+0x1>
 380:	04 c0       	rjmp	.+8      	; 0x38a <__vector_24+0x9c>
			else second12Bits = 0b00000000;
 382:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <second12Bits.4608>
 386:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <second12Bits.4608+0x1>
			++_12bytesSent;
 38a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 38e:	8f 5f       	subi	r24, 0xFF	; 255
 390:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
			c = (uint8_t) ( first12Bits << 4 );
 394:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <first12Bits.4607>
 398:	82 2f       	mov	r24, r18
 39a:	82 95       	swap	r24
 39c:	80 7f       	andi	r24, 0xF0	; 240
			MSB_filter_var = ((uint8_t) ( second12Bits >> 8 ))  & 0x0F;
			c |= MSB_filter_var;
 39e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <second12Bits.4608+0x1>
 3a2:	2f 70       	andi	r18, 0x0F	; 15
 3a4:	28 2b       	or	r18, r24
			
			break;
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <__vector_24+0xcc>
				The MSB_filter_var eliminates these bits away.
		*/
			
		case( 2 ):
		
			c = (uint8_t) second12Bits;
 3a8:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <second12Bits.4608>
			_12bytesSent++;
 3ac:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
			break;
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <__vector_24+0xcc>
	static uint8_t		row				= 0;
	
	static uint16_t		first12Bits		= 0;
	static uint16_t		second12Bits	= 0;
	
	uint8_t				c				= 0;
 3b8:	20 e0       	ldi	r18, 0x00	; 0
		break;
		
		
		}
		
		SPIC.DATA = c;                  // send data
 3ba:	20 93 c3 08 	sts	0x08C3, r18	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
		_8bytesSent++;
 3be:	9f 5f       	subi	r25, 0xFF	; 255
 3c0:	90 93 06 20 	sts	0x2006, r25	; 0x802006 <_8bytesSent.4605>
		
		if ( _12bytesSent >= 24  || _8bytesSent >= 36 )					// if reached end
 3c4:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 3c8:	88 31       	cpi	r24, 0x18	; 24
 3ca:	10 f4       	brcc	.+4      	; 0x3d0 <__vector_24+0xe2>
 3cc:	94 32       	cpi	r25, 0x24	; 36
 3ce:	f8 f0       	brcs	.+62     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			
			SPI_blankAndLatch();
 3d0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <SPI_blankAndLatch>
			
			SPIC.INTCTRL	&=		~( ( 1 << 0 ) | ( 1 << 1 ) );		// turn off interrupts
 3d4:	e0 ec       	ldi	r30, 0xC0	; 192
 3d6:	f8 e0       	ldi	r31, 0x08	; 8
 3d8:	81 81       	ldd	r24, Z+1	; 0x01
 3da:	8c 7f       	andi	r24, 0xFC	; 252
 3dc:	81 83       	std	Z+1, r24	; 0x01
			_12bytesSent	=		0;
 3de:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_end>
			_8bytesSent		=		0;
 3e2:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <_8bytesSent.4605>
			
			PORTA.OUT = PORTA.OUT << 1;
 3e6:	e0 e0       	ldi	r30, 0x00	; 0
 3e8:	f6 e0       	ldi	r31, 0x06	; 6
 3ea:	84 81       	ldd	r24, Z+4	; 0x04
 3ec:	88 0f       	add	r24, r24
 3ee:	84 83       	std	Z+4, r24	; 0x04
			if(++row > 7){
 3f0:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <row.4606>
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	88 30       	cpi	r24, 0x08	; 8
 3f8:	18 f4       	brcc	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fa:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <row.4606>
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				row = 0;
 400:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <row.4606>
				PORTA.OUT+=1;
 404:	e0 e0       	ldi	r30, 0x00	; 0
 406:	f6 e0       	ldi	r31, 0x06	; 6
 408:	84 81       	ldd	r24, Z+4	; 0x04
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	84 83       	std	Z+4, r24	; 0x04
			}
			
		}	
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0b be       	out	0x3b, r0	; 59
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <Timer0_init>:
#include "Timer.h"
#include "SPI.h"

void Timer0_init(void)
{
	TCC0.CTRLA = 0b00000011; //PRESCALER CLK_DIV4
 434:	e0 e0       	ldi	r30, 0x00	; 0
 436:	f8 e0       	ldi	r31, 0x08	; 8
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	80 83       	st	Z, r24
	TCC0.INTCTRLA = 0b00000011; //Interrupt level HIGH
 43c:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 5000;
 43e:	88 e8       	ldi	r24, 0x88	; 136
 440:	93 e1       	ldi	r25, 0x13	; 19
 442:	86 a3       	std	Z+38, r24	; 0x26
 444:	97 a3       	std	Z+39, r25	; 0x27
 446:	08 95       	ret

00000448 <__vector_14>:
}
/*		Timer 0 is used for the periodic update of the Display		*/

ISR ( TCC0_OVF_vect )
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	0b b6       	in	r0, 0x3b	; 59
 454:	0f 92       	push	r0
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	SPI_update();
 46e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <SPI_update>
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0b be       	out	0x3b, r0	; 59
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
