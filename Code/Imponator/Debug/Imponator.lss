
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802000  00802000  0000042a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000373f  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028f4  00000000  00000000  00003c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cd  00000000  00000000  0000654f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00006d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002324  00000000  00000000  00006e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013b  00000000  00000000  00009158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009293  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_14>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_24>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  90:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  94:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  98:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  fc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 100:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 104:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 108:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 10c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 110:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 114:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 118:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 11c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 120:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 124:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 128:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 12c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 130:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 134:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 138:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 13c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 140:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 144:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 148:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 14c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 150:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 154:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 158:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 15c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 160:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 164:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 168:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 16c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 170:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 174:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 178:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 17c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 180:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 184:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 188:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 18c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 190:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 194:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 198:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 19c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a2 30       	cpi	r26, 0x02	; 2
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	0e 94 20 01 	call	0x240	; 0x240 <main>
 21c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <_exit>

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <clock_init>:
		_delay_ms(100);*/
    }
}

void clock_init(){
	OSC.CTRL |= OSC_RC32MEN_bm;
 224:	e0 e5       	ldi	r30, 0x50	; 80
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 22e:	81 81       	ldd	r24, Z+1	; 0x01
 230:	81 ff       	sbrs	r24, 1
 232:	fd cf       	rjmp	.-6      	; 0x22e <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC32M_gc);
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	88 ed       	ldi	r24, 0xD8	; 216
 238:	84 bf       	out	0x34, r24	; 52
 23a:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 23e:	08 95       	ret

00000240 <main>:

void clock_init(void);

int main(void)
{
	clock_init();
 240:	0e 94 12 01 	call	0x224	; 0x224 <clock_init>
	SPI_init();
 244:	0e 94 34 01 	call	0x268	; 0x268 <SPI_init>
	Timer0_init();
 248:	0e 94 a7 01 	call	0x34e	; 0x34e <Timer0_init>
	
	sei();
 24c:	78 94       	sei
	PMIC.CTRL |= 7; //all interrupt levels are enabled
 24e:	e0 ea       	ldi	r30, 0xA0	; 160
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	87 60       	ori	r24, 0x07	; 7
 256:	82 83       	std	Z+2, r24	; 0x02
	
	
	PORTA.DIRSET = 0b11111111; //ROW2
 258:	e0 e0       	ldi	r30, 0x00	; 0
 25a:	f6 e0       	ldi	r31, 0x06	; 6
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0b00000000; //ROW2
 260:	15 82       	std	Z+5, r1	; 0x05
	SPIC.DATA = 0x00;
 262:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 266:	ff cf       	rjmp	.-2      	; 0x266 <main+0x26>

00000268 <SPI_init>:
#include "Display.h"



void SPI_init(void){
	PORTC.DIRSET |= 1 << 0; //Latch pin for TLC5947
 268:	e0 e4       	ldi	r30, 0x40	; 64
 26a:	f6 e0       	ldi	r31, 0x06	; 6
 26c:	81 81       	ldd	r24, Z+1	; 0x01
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 272:	81 81       	ldd	r24, Z+1	; 0x01
 274:	82 60       	ori	r24, 0x02	; 2
 276:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 7; //SCK pin for TLC5947
 278:	81 81       	ldd	r24, Z+1	; 0x01
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 27e:	81 81       	ldd	r24, Z+1	; 0x01
 280:	80 62       	ori	r24, 0x20	; 32
 282:	81 83       	std	Z+1, r24	; 0x01


	PORTC.PIN4CTRL |= PORT_OPC_PULLUP_gc;
 284:	84 89       	ldd	r24, Z+20	; 0x14
 286:	88 61       	ori	r24, 0x18	; 24
 288:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.DIRSET |= 1 << 4; //Slave select
 28a:	81 81       	ldd	r24, Z+1	; 0x01
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= 1 << 4; //Slave select HIGH
 290:	85 81       	ldd	r24, Z+5	; 0x05
 292:	80 61       	ori	r24, 0x10	; 16
 294:	85 83       	std	Z+5, r24	; 0x05
	

	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV4_gc | SPI_CLK2X_bm;
 296:	a0 ec       	ldi	r26, 0xC0	; 192
 298:	b8 e0       	ldi	r27, 0x08	; 8
 29a:	8c 91       	ld	r24, X
 29c:	80 6d       	ori	r24, 0xD0	; 208
 29e:	8c 93       	st	X, r24
	SPIC.INTCTRL |= SPI_INTLVL_LO_gc;
 2a0:	11 96       	adiw	r26, 0x01	; 1
 2a2:	8c 91       	ld	r24, X
 2a4:	11 97       	sbiw	r26, 0x01	; 1
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	11 96       	adiw	r26, 0x01	; 1
 2aa:	8c 93       	st	X, r24
	
	PORTC.OUTCLR |= 1 << 0;
 2ac:	86 81       	ldd	r24, Z+6	; 0x06
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	86 83       	std	Z+6, r24	; 0x06
 2b2:	08 95       	ret

000002b4 <SPI_update>:
}

void SPI_update(void){
	SPIC.INTCTRL |= SPI_INTLVL_MED_gc; // interrupt level for SPIC set to medium
 2b4:	e0 ec       	ldi	r30, 0xC0	; 192
 2b6:	f8 e0       	ldi	r31, 0x08	; 8
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	81 83       	std	Z+1, r24	; 0x01
 2be:	08 95       	ret

000002c0 <__vector_24>:
}

ISR ( SPIC_INT_vect )
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	0b b6       	in	r0, 0x3b	; 59
 2cc:	0f 92       	push	r0
 2ce:	2f 93       	push	r18
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	static uint8_t	_8bytesSent		= 0;
	static uint8_t	row				= 0;

	SPIC.DATA = 0b0011;
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	_8bytesSent++;
 2de:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <_8bytesSent.4603>
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
	
	
	if(_8bytesSent>36){
 2e4:	85 32       	cpi	r24, 0x25	; 37
 2e6:	18 f4       	brcc	.+6      	; 0x2ee <__vector_24+0x2e>
{
	static uint8_t	_8bytesSent		= 0;
	static uint8_t	row				= 0;

	SPIC.DATA = 0b0011;
	_8bytesSent++;
 2e8:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_8bytesSent.4603>
 2ec:	24 c0       	rjmp	.+72     	; 0x336 <__vector_24+0x76>
	
	
	if(_8bytesSent>36){
		_8bytesSent = 0;
 2ee:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <_8bytesSent.4603>
		PORTC.OUTSET |= 1 << 0 | 1<<1;
 2f2:	e0 e4       	ldi	r30, 0x40	; 64
 2f4:	f6 e0       	ldi	r31, 0x06	; 6
 2f6:	85 81       	ldd	r24, Z+5	; 0x05
 2f8:	83 60       	ori	r24, 0x03	; 3
 2fa:	85 83       	std	Z+5, r24	; 0x05
		PORTC.OUTCLR |= 1 << 0 | 1<<1;
 2fc:	86 81       	ldd	r24, Z+6	; 0x06
 2fe:	83 60       	ori	r24, 0x03	; 3
 300:	86 83       	std	Z+6, r24	; 0x06
		SPIC.INTCTRL	&=		~( ( 1 << 0 ) | ( 1 << 1 ) );
 302:	e0 ec       	ldi	r30, 0xC0	; 192
 304:	f8 e0       	ldi	r31, 0x08	; 8
 306:	81 81       	ldd	r24, Z+1	; 0x01
 308:	8c 7f       	andi	r24, 0xFC	; 252
 30a:	81 83       	std	Z+1, r24	; 0x01
		
		PORTA.OUT = ~( 1 << row );
 30c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <_edata>
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <__vector_24+0x5c>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <__vector_24+0x58>
 320:	80 95       	com	r24
 322:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
		if(++row > 7)
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	28 30       	cpi	r18, 0x08	; 8
 32a:	18 f4       	brcc	.+6      	; 0x332 <__vector_24+0x72>
 32c:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <_edata>
 330:	02 c0       	rjmp	.+4      	; 0x336 <__vector_24+0x76>
			row = 0;
 332:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
		
	}
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0b be       	out	0x3b, r0	; 59
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <Timer0_init>:
#include "Timer.h"
#include "SPI.h"

void Timer0_init(void)
{
	TCC0.CTRLA = 0b00000011; //PRESCALER CLK_DIV4
 34e:	e0 e0       	ldi	r30, 0x00	; 0
 350:	f8 e0       	ldi	r31, 0x08	; 8
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	80 83       	st	Z, r24
	TCC0.INTCTRLA = 0b00000011; //Interrupt level HIGH
 356:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 5000;
 358:	88 e8       	ldi	r24, 0x88	; 136
 35a:	93 e1       	ldi	r25, 0x13	; 19
 35c:	86 a3       	std	Z+38, r24	; 0x26
 35e:	97 a3       	std	Z+39, r25	; 0x27
 360:	08 95       	ret

00000362 <__vector_14>:
}
/*		Timer 0 is used for the periodic update of the Display		*/

ISR ( TCC0_OVF_vect )
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	0b b6       	in	r0, 0x3b	; 59
 36e:	0f 92       	push	r0
 370:	2f 93       	push	r18
 372:	3f 93       	push	r19
 374:	4f 93       	push	r20
 376:	5f 93       	push	r21
 378:	6f 93       	push	r22
 37a:	7f 93       	push	r23
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	af 93       	push	r26
 382:	bf 93       	push	r27
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
	SPI_update();
 388:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <SPI_update>
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0b be       	out	0x3b, r0	; 59
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
