
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00802000  000006de  00000772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008020c0  008020c0  00000832  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000398b  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a16  00000000  00000000  000042df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000939  00000000  00000000  00006cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00007630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023fb  00000000  00000000  000077b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  00009baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00009e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__ctors_end>
   4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
   8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
   c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  10:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  14:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  18:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  1c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  20:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  24:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  28:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  2c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  30:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  34:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  38:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_14>
  3c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  40:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  44:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  48:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  4c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  50:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  54:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  58:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  5c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  60:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_24>
  64:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  68:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  6c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  70:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  74:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  78:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  7c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  80:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  84:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  88:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  8c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  90:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  94:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  98:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  9c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  a0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  a4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  a8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  ac:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  b0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  b4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  b8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  bc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  c0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  c4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  c8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  cc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  d0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  d4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  d8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  dc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  e0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  e4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  e8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  ec:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  f0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  f4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  f8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
  fc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 100:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 104:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 108:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 10c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 110:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 114:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 118:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 11c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 120:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 124:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 128:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 12c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 130:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 134:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 138:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 13c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 140:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 144:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 148:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 14c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 150:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 154:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 158:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 15c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 160:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 164:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 168:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 16c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 170:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 174:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 178:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 17c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 180:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 184:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 188:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 18c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 190:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 194:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 198:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 19c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1a0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1a4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1a8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1ac:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1b0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1b4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1b8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1bc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1c0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1c4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1c8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1cc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1d0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1d4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1d8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1dc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1e0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1e4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1e8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1ec:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1f0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1f4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
 1f8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>

000001fc <BrightnessLookUpTable>:
 1fc:	00 00 00 00 00 00 01 00 01 00 02 00 03 00 04 00     ................
 20c:	05 00 06 00 07 00 09 00 0a 00 0c 00 0e 00 10 00     ................
 21c:	12 00 14 00 16 00 19 00 1b 00 1e 00 21 00 24 00     ............!.$.
 22c:	27 00 2a 00 2d 00 31 00 34 00 38 00 3c 00 40 00     '.*.-.1.4.8.<.@.
 23c:	44 00 48 00 4d 00 51 00 56 00 5a 00 5f 00 64 00     D.H.M.Q.V.Z._.d.
 24c:	69 00 6f 00 74 00 79 00 7f 00 85 00 8b 00 91 00     i.o.t.y.........
 25c:	97 00 9d 00 a3 00 aa 00 b0 00 b7 00 be 00 c5 00     ................
 26c:	cc 00 d3 00 db 00 e2 00 ea 00 f2 00 fa 00 02 01     ................
 27c:	0a 01 12 01 1a 01 23 01 2b 01 34 01 3d 01 46 01     ......#.+.4.=.F.
 28c:	4f 01 58 01 62 01 6b 01 75 01 7f 01 89 01 93 01     O.X.b.k.u.......
 29c:	9d 01 a7 01 b2 01 bc 01 c7 01 d1 01 dc 01 e7 01     ................
 2ac:	f3 01 fe 01 09 02 15 02 20 02 2c 02 38 02 44 02     ........ .,.8.D.
 2bc:	50 02 5d 02 69 02 76 02 82 02 8f 02 9c 02 a9 02     P.].i.v.........
 2cc:	b6 02 c3 02 d1 02 de 02 ec 02 fa 02 08 03 16 03     ................
 2dc:	24 03 32 03 41 03 4f 03 5e 03 6d 03 7c 03 8b 03     $.2.A.O.^.m.|...
 2ec:	9a 03 a9 03 b9 03 c8 03 d8 03 e8 03 f8 03 08 04     ................
 2fc:	18 04 28 04 39 04 49 04 5a 04 6b 04 7c 04 8d 04     ..(.9.I.Z.k.|...
 30c:	9e 04 af 04 c1 04 d2 04 e4 04 f6 04 08 05 1a 05     ................
 31c:	2c 05 3e 05 51 05 63 05 76 05 89 05 9c 05 af 05     ,.>.Q.c.v.......
 32c:	c2 05 d6 05 e9 05 fd 05 10 06 24 06 38 06 4c 06     ..........$.8.L.
 33c:	61 06 75 06 89 06 9e 06 b3 06 c8 06 dd 06 f2 06     a.u.............
 34c:	07 07 1c 07 32 07 47 07 5d 07 73 07 89 07 9f 07     ....2.G.].s.....
 35c:	b5 07 cc 07 e2 07 f9 07 0f 08 26 08 3d 08 54 08     ..........&.=.T.
 36c:	6c 08 83 08 9b 08 b2 08 ca 08 e2 08 fa 08 12 09     l...............
 37c:	2a 09 43 09 5b 09 74 09 8c 09 a5 09 be 09 d8 09     *.C.[.t.........
 38c:	f1 09 0a 0a 24 0a 3d 0a 57 0a 71 0a 8b 0a a5 0a     ....$.=.W.q.....
 39c:	bf 0a da 0a f4 0a 0f 0b 2a 0b 45 0b 60 0b 7b 0b     ........*.E.`.{.
 3ac:	96 0b b2 0b cd 0b e9 0b 04 0c 20 0c 3c 0c 59 0c     .......... .<.Y.
 3bc:	75 0c 91 0c ae 0c ca 0c e7 0c 04 0d 21 0d 3e 0d     u...........!.>.
 3cc:	5c 0d 79 0d 97 0d b4 0d d2 0d f0 0d 0e 0e 2c 0e     \.y...........,.
 3dc:	4b 0e 69 0e 88 0e a6 0e c5 0e e4 0e 03 0f 22 0f     K.i...........".
 3ec:	42 0f 61 0f 81 0f a0 0f c0 0f e0 0f ff 0f ff 0f     B.a.............

000003fc <__ctors_end>:
 3fc:	11 24       	eor	r1, r1
 3fe:	1f be       	out	0x3f, r1	; 63
 400:	cf ef       	ldi	r28, 0xFF	; 255
 402:	cd bf       	out	0x3d, r28	; 61
 404:	df e2       	ldi	r29, 0x2F	; 47
 406:	de bf       	out	0x3e, r29	; 62

00000408 <__do_copy_data>:
 408:	10 e2       	ldi	r17, 0x20	; 32
 40a:	a0 e0       	ldi	r26, 0x00	; 0
 40c:	b0 e2       	ldi	r27, 0x20	; 32
 40e:	ee ed       	ldi	r30, 0xDE	; 222
 410:	f6 e0       	ldi	r31, 0x06	; 6
 412:	00 e0       	ldi	r16, 0x00	; 0
 414:	0b bf       	out	0x3b, r16	; 59
 416:	02 c0       	rjmp	.+4      	; 0x41c <__do_copy_data+0x14>
 418:	07 90       	elpm	r0, Z+
 41a:	0d 92       	st	X+, r0
 41c:	a0 3c       	cpi	r26, 0xC0	; 192
 41e:	b1 07       	cpc	r27, r17
 420:	d9 f7       	brne	.-10     	; 0x418 <__do_copy_data+0x10>

00000422 <__do_clear_bss>:
 422:	20 e2       	ldi	r18, 0x20	; 32
 424:	a0 ec       	ldi	r26, 0xC0	; 192
 426:	b0 e2       	ldi	r27, 0x20	; 32
 428:	01 c0       	rjmp	.+2      	; 0x42c <.do_clear_bss_start>

0000042a <.do_clear_bss_loop>:
 42a:	1d 92       	st	X+, r1

0000042c <.do_clear_bss_start>:
 42c:	a7 3c       	cpi	r26, 0xC7	; 199
 42e:	b2 07       	cpc	r27, r18
 430:	e1 f7       	brne	.-8      	; 0x42a <.do_clear_bss_loop>
 432:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
 436:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_exit>

0000043a <__bad_interrupt>:
 43a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000043e <Display_getChannelBrightness>:
void Display_setChannelBrightness(int row, int channel, uint8_t brightness){
	DisplayData[row][channel] = brightness;
}

uint8_t Display_getChannelBrightness(int row, int channel){
	return DisplayData[row][channel];
 43e:	9c 01       	movw	r18, r24
 440:	22 0f       	add	r18, r18
 442:	33 1f       	adc	r19, r19
 444:	82 0f       	add	r24, r18
 446:	93 1f       	adc	r25, r19
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	80 50       	subi	r24, 0x00	; 0
 456:	90 4e       	sbci	r25, 0xE0	; 224
 458:	fc 01       	movw	r30, r24
 45a:	e6 0f       	add	r30, r22
 45c:	f7 1f       	adc	r31, r23
}
 45e:	80 81       	ld	r24, Z
 460:	08 95       	ret

00000462 <clock_init>:
		
	}
}

void clock_init(){
	OSC.CTRL |= OSC_RC32MEN_bm;
 462:	e0 e5       	ldi	r30, 0x50	; 80
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 46c:	81 81       	ldd	r24, Z+1	; 0x01
 46e:	81 ff       	sbrs	r24, 1
 470:	fd cf       	rjmp	.-6      	; 0x46c <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC32M_gc);
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	88 ed       	ldi	r24, 0xD8	; 216
 476:	84 bf       	out	0x34, r24	; 52
 478:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 47c:	08 95       	ret

0000047e <main>:

void clock_init(void);

int main(void)
{
	clock_init();
 47e:	0e 94 31 02 	call	0x462	; 0x462 <clock_init>
	SPI_init();
 482:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SPI_init>
	Timer0_init();
 486:	0e 94 3b 03 	call	0x676	; 0x676 <Timer0_init>
	
	
	
	
	PORTA.DIRSET = 0b11111111; //ROW2
 48a:	e0 e0       	ldi	r30, 0x00	; 0
 48c:	f6 e0       	ldi	r31, 0x06	; 6
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0b00000000; //ROW2
 492:	15 82       	std	Z+5, r1	; 0x05
	SPIC.DATA = 0; //Used to trigger the SPI interrupts
 494:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	
	sei(); //activate global interrupts
 498:	78 94       	sei
	PMIC.CTRL |= 7; //all interrupt levels are enabled
 49a:	e0 ea       	ldi	r30, 0xA0	; 160
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	82 81       	ldd	r24, Z+2	; 0x02
 4a0:	87 60       	ori	r24, 0x07	; 7
 4a2:	82 83       	std	Z+2, r24	; 0x02
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <main+0x26>

000004a6 <SPI_init>:
#include "Display.h"
#include "ProgmemData.h"


void SPI_init(void){
	PORTC.DIRSET |= 1 << 0; //Latch pin for TLC5947
 4a6:	e0 e4       	ldi	r30, 0x40	; 64
 4a8:	f6 e0       	ldi	r31, 0x06	; 6
 4aa:	81 81       	ldd	r24, Z+1	; 0x01
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 4b0:	81 81       	ldd	r24, Z+1	; 0x01
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 7; //SCK pin for TLC5947
 4b6:	81 81       	ldd	r24, Z+1	; 0x01
 4b8:	80 68       	ori	r24, 0x80	; 128
 4ba:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 4bc:	81 81       	ldd	r24, Z+1	; 0x01
 4be:	80 62       	ori	r24, 0x20	; 32
 4c0:	81 83       	std	Z+1, r24	; 0x01


	PORTC.PIN4CTRL |= PORT_OPC_PULLUP_gc;
 4c2:	84 89       	ldd	r24, Z+20	; 0x14
 4c4:	88 61       	ori	r24, 0x18	; 24
 4c6:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.DIRSET |= 1 << 4; //Slave select
 4c8:	81 81       	ldd	r24, Z+1	; 0x01
 4ca:	80 61       	ori	r24, 0x10	; 16
 4cc:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= 1 << 4; //Slave select HIGH
 4ce:	85 81       	ldd	r24, Z+5	; 0x05
 4d0:	80 61       	ori	r24, 0x10	; 16
 4d2:	85 83       	std	Z+5, r24	; 0x05
	

	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV128_gc | SPI_CLK2X_bm;
 4d4:	a0 ec       	ldi	r26, 0xC0	; 192
 4d6:	b8 e0       	ldi	r27, 0x08	; 8
 4d8:	8c 91       	ld	r24, X
 4da:	83 6d       	ori	r24, 0xD3	; 211
 4dc:	8c 93       	st	X, r24
	SPIC.INTCTRL |= SPI_INTLVL_LO_gc;
 4de:	11 96       	adiw	r26, 0x01	; 1
 4e0:	8c 91       	ld	r24, X
 4e2:	11 97       	sbiw	r26, 0x01	; 1
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	11 96       	adiw	r26, 0x01	; 1
 4e8:	8c 93       	st	X, r24
	
	PORTC.OUTCLR |= 1 << 0;
 4ea:	86 81       	ldd	r24, Z+6	; 0x06
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	86 83       	std	Z+6, r24	; 0x06
 4f0:	08 95       	ret

000004f2 <SPI_update>:
}

void SPI_update(void){
	SPIC.INTCTRL |= SPI_INTLVL_MED_gc; // interrupt level for SPIC set to medium
 4f2:	e0 ec       	ldi	r30, 0xC0	; 192
 4f4:	f8 e0       	ldi	r31, 0x08	; 8
 4f6:	81 81       	ldd	r24, Z+1	; 0x01
 4f8:	82 60       	ori	r24, 0x02	; 2
 4fa:	81 83       	std	Z+1, r24	; 0x01
 4fc:	08 95       	ret

000004fe <SPI_blankAndLatch>:
}

void SPI_blankAndLatch(void){
	PORTC.OUTSET |= 1 << 0 | 1<<1;
 4fe:	e0 e4       	ldi	r30, 0x40	; 64
 500:	f6 e0       	ldi	r31, 0x06	; 6
 502:	85 81       	ldd	r24, Z+5	; 0x05
 504:	83 60       	ori	r24, 0x03	; 3
 506:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR |= 1 << 0 | 1<<1;
 508:	86 81       	ldd	r24, Z+6	; 0x06
 50a:	83 60       	ori	r24, 0x03	; 3
 50c:	86 83       	std	Z+6, r24	; 0x06
 50e:	08 95       	ret

00000510 <__vector_24>:
}

ISR ( SPIC_INT_vect )
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	0b b6       	in	r0, 0x3b	; 59
 51c:	0f 92       	push	r0
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	4f 93       	push	r20
 524:	5f 93       	push	r21
 526:	6f 93       	push	r22
 528:	7f 93       	push	r23
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	af 93       	push	r26
 530:	bf 93       	push	r27
 532:	cf 93       	push	r28
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	The data is sent in batches of two 12bits variables, divided into three 8bits variables. ( 12*2 == 8*3 )
	The sending of the two 12bits variables are divided into three actions, each one choosing the appropriate bits
	to put into the 8bit variable c, which is transmitted once the switch ends.
*/
	
	switch ( _8bytesSent % 3 )			
 538:	90 91 c6 20 	lds	r25, 0x20C6	; 0x8020c6 <_8bytesSent.4613>
 53c:	8b ea       	ldi	r24, 0xAB	; 171
 53e:	98 9f       	mul	r25, r24
 540:	81 2d       	mov	r24, r1
 542:	11 24       	eor	r1, r1
 544:	86 95       	lsr	r24
 546:	28 2f       	mov	r18, r24
 548:	22 0f       	add	r18, r18
 54a:	82 0f       	add	r24, r18
 54c:	98 1b       	sub	r25, r24
 54e:	91 30       	cpi	r25, 0x01	; 1
 550:	19 f1       	breq	.+70     	; 0x598 <__vector_24+0x88>
 552:	20 f0       	brcs	.+8      	; 0x55c <__vector_24+0x4c>
 554:	92 30       	cpi	r25, 0x02	; 2
 556:	09 f4       	brne	.+2      	; 0x55a <__vector_24+0x4a>
 558:	41 c0       	rjmp	.+130    	; 0x5dc <__vector_24+0xcc>
 55a:	48 c0       	rjmp	.+144    	; 0x5ec <__vector_24+0xdc>
	{
		case ( 0 ):
			first12Bits = pgm_read_word(  & (  BrightnessLookUpTable[Display_getChannelBrightness(row,23-_12bytesSent)] ) );
 55c:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <_12bytesSent.4612>
 560:	67 e1       	ldi	r22, 0x17	; 23
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	68 1b       	sub	r22, r24
 566:	71 09       	sbc	r23, r1
 568:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <row.4614>
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 1f 02 	call	0x43e	; 0x43e <Display_getChannelBrightness>
 572:	e8 2f       	mov	r30, r24
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	ee 0f       	add	r30, r30
 578:	ff 1f       	adc	r31, r31
 57a:	e4 50       	subi	r30, 0x04	; 4
 57c:	fe 4f       	sbci	r31, 0xFE	; 254
 57e:	25 91       	lpm	r18, Z+
 580:	34 91       	lpm	r19, Z
 582:	20 93 c2 20 	sts	0x20C2, r18	; 0x8020c2 <first12Bits.4615>
 586:	30 93 c3 20 	sts	0x20C3, r19	; 0x8020c3 <first12Bits.4615+0x1>
			c = ( uint8_t ) (first12Bits >> 4);
 58a:	32 95       	swap	r19
 58c:	22 95       	swap	r18
 58e:	2f 70       	andi	r18, 0x0F	; 15
 590:	23 27       	eor	r18, r19
 592:	3f 70       	andi	r19, 0x0F	; 15
 594:	23 27       	eor	r18, r19
			
			break;
 596:	2b c0       	rjmp	.+86     	; 0x5ee <__vector_24+0xde>

		case( 1 ):
			++_12bytesSent;
 598:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <_12bytesSent.4612>
 59c:	8f 5f       	subi	r24, 0xFF	; 255
 59e:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <_12bytesSent.4612>
			second12Bits = pgm_read_word(  & (   BrightnessLookUpTable[Display_getChannelBrightness(row,23-_12bytesSent)]) );
 5a2:	67 e1       	ldi	r22, 0x17	; 23
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	68 1b       	sub	r22, r24
 5a8:	71 09       	sbc	r23, r1
 5aa:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <row.4614>
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 1f 02 	call	0x43e	; 0x43e <Display_getChannelBrightness>
 5b4:	e8 2f       	mov	r30, r24
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	e4 50       	subi	r30, 0x04	; 4
 5be:	fe 4f       	sbci	r31, 0xFE	; 254
 5c0:	85 91       	lpm	r24, Z+
 5c2:	94 91       	lpm	r25, Z
 5c4:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <__data_end>
 5c8:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <__data_end+0x1>
			c = (uint8_t) ( first12Bits << 4 );
 5cc:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <first12Bits.4615>
 5d0:	22 95       	swap	r18
 5d2:	20 7f       	andi	r18, 0xF0	; 240
			MSB_filter_var = ((uint8_t) ( second12Bits >> 8 ))  & 0x0F;
			c |= MSB_filter_var;
 5d4:	89 2f       	mov	r24, r25
 5d6:	8f 70       	andi	r24, 0x0F	; 15
 5d8:	28 2b       	or	r18, r24

			break;
 5da:	09 c0       	rjmp	.+18     	; 0x5ee <__vector_24+0xde>
			
		case( 2 ):
		
			c = (uint8_t) second12Bits;
 5dc:	20 91 c0 20 	lds	r18, 0x20C0	; 0x8020c0 <__data_end>
			_12bytesSent++;
 5e0:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <_12bytesSent.4612>
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <_12bytesSent.4612>
			break;	
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__vector_24+0xde>
	static uint8_t		row				= 0;
	
	static uint16_t		first12Bits		= 0;
	static uint16_t		second12Bits	= 0;
	
	uint8_t				c				= 0;
 5ec:	20 e0       	ldi	r18, 0x00	; 0
		break;
		
		
		}
		
		SPIC.DATA = c;                  // send data
 5ee:	20 93 c3 08 	sts	0x08C3, r18	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
		_8bytesSent++;
 5f2:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <_8bytesSent.4613>
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <_8bytesSent.4613>
		
		if ( _12bytesSent > 24  || _8bytesSent > 36 )					// if reached end
 5fc:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <_12bytesSent.4612>
 600:	99 31       	cpi	r25, 0x19	; 25
 602:	10 f4       	brcc	.+4      	; 0x608 <__vector_24+0xf8>
 604:	85 32       	cpi	r24, 0x25	; 37
 606:	18 f1       	brcs	.+70     	; 0x64e <__vector_24+0x13e>
		{
			row++;
 608:	c0 91 c4 20 	lds	r28, 0x20C4	; 0x8020c4 <row.4614>
 60c:	cf 5f       	subi	r28, 0xFF	; 255
 60e:	c0 93 c4 20 	sts	0x20C4, r28	; 0x8020c4 <row.4614>
			SPI_blankAndLatch();
 612:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_blankAndLatch>
			
			SPIC.INTCTRL	&=		~( ( 1 << 0 ) | ( 1 << 1 ) );		// turn off interrupts
 616:	e0 ec       	ldi	r30, 0xC0	; 192
 618:	f8 e0       	ldi	r31, 0x08	; 8
 61a:	81 81       	ldd	r24, Z+1	; 0x01
 61c:	8c 7f       	andi	r24, 0xFC	; 252
 61e:	81 83       	std	Z+1, r24	; 0x01
			_12bytesSent	=		0;
 620:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <_12bytesSent.4612>
			_8bytesSent		=		0;
 624:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <_8bytesSent.4613>
			
			if(row > 8){
 628:	c9 30       	cpi	r28, 0x09	; 9
 62a:	30 f0       	brcs	.+12     	; 0x638 <__vector_24+0x128>
				row = 0;
 62c:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <row.4614>
				PORTA.OUT = (1<<0);
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 636:	0b c0       	rjmp	.+22     	; 0x64e <__vector_24+0x13e>
			}
			else if (row == 1) PORTA.OUT = (1<<0);
 638:	c1 30       	cpi	r28, 0x01	; 1
 63a:	21 f4       	brne	.+8      	; 0x644 <__vector_24+0x134>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 642:	05 c0       	rjmp	.+10     	; 0x64e <__vector_24+0x13e>
			else PORTA.OUT= PORTA.OUT << 1;
 644:	e0 e0       	ldi	r30, 0x00	; 0
 646:	f6 e0       	ldi	r31, 0x06	; 6
 648:	84 81       	ldd	r24, Z+4	; 0x04
 64a:	88 0f       	add	r24, r24
 64c:	84 83       	std	Z+4, r24	; 0x04
			
		}	
}
 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	cf 91       	pop	r28
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	0f 90       	pop	r0
 66a:	0b be       	out	0x3b, r0	; 59
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <Timer0_init>:
#include "Timer.h"
#include "SPI.h"

void Timer0_init(void)
{
	TCC0.CTRLA = 0b00000011; //PRESCALER CLK_DIV4
 676:	e0 e0       	ldi	r30, 0x00	; 0
 678:	f8 e0       	ldi	r31, 0x08	; 8
 67a:	83 e0       	ldi	r24, 0x03	; 3
 67c:	80 83       	st	Z, r24
	TCC0.INTCTRLA = 0b00000011; //Interrupt level HIGH
 67e:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 5000;
 680:	88 e8       	ldi	r24, 0x88	; 136
 682:	93 e1       	ldi	r25, 0x13	; 19
 684:	86 a3       	std	Z+38, r24	; 0x26
 686:	97 a3       	std	Z+39, r25	; 0x27
 688:	08 95       	ret

0000068a <__vector_14>:
}
/*		Timer 0 is used for the periodic update of the Display		*/

ISR ( TCC0_OVF_vect )
{
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	0b b6       	in	r0, 0x3b	; 59
 696:	0f 92       	push	r0
 698:	2f 93       	push	r18
 69a:	3f 93       	push	r19
 69c:	4f 93       	push	r20
 69e:	5f 93       	push	r21
 6a0:	6f 93       	push	r22
 6a2:	7f 93       	push	r23
 6a4:	8f 93       	push	r24
 6a6:	9f 93       	push	r25
 6a8:	af 93       	push	r26
 6aa:	bf 93       	push	r27
 6ac:	ef 93       	push	r30
 6ae:	ff 93       	push	r31
	SPI_update();
 6b0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_update>
 6b4:	ff 91       	pop	r31
 6b6:	ef 91       	pop	r30
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	7f 91       	pop	r23
 6c2:	6f 91       	pop	r22
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	0b be       	out	0x3b, r0	; 59
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
