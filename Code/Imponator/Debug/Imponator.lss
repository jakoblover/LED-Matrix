
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000306  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d23  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002798  00000000  00000000  00003117  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e4  00000000  00000000  000058af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00005e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001f5c  00000000  00000000  00005ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007e  00000000  00000000  00007e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00007ea2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  50:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  80:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  84:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  8c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  90:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  94:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  98:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  9c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  fc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 100:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 104:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 108:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 10c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 110:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 114:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 118:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 11c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 120:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 124:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 128:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 12c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 130:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 134:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 138:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 13c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 140:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 144:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 148:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 14c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 150:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 154:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 158:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 15c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 160:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 164:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 168:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 16c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 170:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 174:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 178:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 17c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 180:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 184:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 188:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 18c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 190:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 194:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 198:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 19c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62
 208:	0e 94 18 01 	call	0x230	; 0x230 <main>
 20c:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

00000210 <__bad_interrupt>:
 210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <clock_init>:
		_delay_ms(1);
    }
}

void clock_init(){
	OSC.CTRL |= OSC_RC2MEN_bm;
 214:	e0 e5       	ldi	r30, 0x50	; 80
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC2MRDY_bm));
 21e:	81 81       	ldd	r24, Z+1	; 0x01
 220:	80 ff       	sbrs	r24, 0
 222:	fd cf       	rjmp	.-6      	; 0x21e <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC2M_gc);
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	88 ed       	ldi	r24, 0xD8	; 216
 228:	84 bf       	out	0x34, r24	; 52
 22a:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 22e:	08 95       	ret

00000230 <main>:

void clock_init(void);

int main(void)
{
	clock_init();
 230:	0e 94 0a 01 	call	0x214	; 0x214 <clock_init>
	
	_latPort.DIRSET |= 1 << _latPin; //Latch pin for TLC5947
 234:	e0 e4       	ldi	r30, 0x40	; 64
 236:	f6 e0       	ldi	r31, 0x06	; 6
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	81 83       	std	Z+1, r24	; 0x01
	_latPort.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 23e:	81 81       	ldd	r24, Z+1	; 0x01
 240:	82 60       	ori	r24, 0x02	; 2
 242:	81 83       	std	Z+1, r24	; 0x01
	_latPort.DIRSET |= 1 << 7; //SCK pin for TLC5947
 244:	81 81       	ldd	r24, Z+1	; 0x01
 246:	80 68       	ori	r24, 0x80	; 128
 248:	81 83       	std	Z+1, r24	; 0x01
	_latPort.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 24a:	81 81       	ldd	r24, Z+1	; 0x01
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	81 83       	std	Z+1, r24	; 0x01


	PORTA.DIRSET = 0b11111111; //ROW2
 250:	a0 e0       	ldi	r26, 0x00	; 0
 252:	b6 e0       	ldi	r27, 0x06	; 6
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	11 96       	adiw	r26, 0x01	; 1
 258:	8c 93       	st	X, r24
 25a:	11 97       	sbiw	r26, 0x01	; 1

	_SSPort.PIN4CTRL |= PORT_OPC_PULLUP_gc;
 25c:	94 89       	ldd	r25, Z+20	; 0x14
 25e:	98 61       	ori	r25, 0x18	; 24
 260:	94 8b       	std	Z+20, r25	; 0x14
	_SSPort.DIRSET |= 1 << _SSPin; //Slave select
 262:	91 81       	ldd	r25, Z+1	; 0x01
 264:	90 61       	ori	r25, 0x10	; 16
 266:	91 83       	std	Z+1, r25	; 0x01
	_SSPort.OUTSET |= 1 << _SSPin; //Slave select HIGH
 268:	95 81       	ldd	r25, Z+5	; 0x05
 26a:	90 61       	ori	r25, 0x10	; 16
 26c:	95 83       	std	Z+5, r25	; 0x05
	PORTA.OUTSET = 0b11111111; //ROW2
 26e:	15 96       	adiw	r26, 0x05	; 5
 270:	8c 93       	st	X, r24

	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc;
 272:	a0 ec       	ldi	r26, 0xC0	; 192
 274:	b8 e0       	ldi	r27, 0x08	; 8
 276:	9c 91       	ld	r25, X
 278:	90 65       	ori	r25, 0x50	; 80
 27a:	9c 93       	st	X, r25
	SPIC.INTCTRL |= SPI_INTLVL_OFF_gc;
 27c:	11 96       	adiw	r26, 0x01	; 1
 27e:	9c 91       	ld	r25, X
 280:	11 97       	sbiw	r26, 0x01	; 1
 282:	11 96       	adiw	r26, 0x01	; 1
 284:	9c 93       	st	X, r25
 286:	11 97       	sbiw	r26, 0x01	; 1

		_latPort.OUTCLR |= 1 << _latPin;
 288:	96 81       	ldd	r25, Z+6	; 0x06
 28a:	91 60       	ori	r25, 0x01	; 1
 28c:	96 83       	std	Z+6, r25	; 0x06

		SPIC.DATA = 0b11111111;
 28e:	13 96       	adiw	r26, 0x03	; 3
 290:	8c 93       	st	X, r24
		while(!(SPIC.STATUS & SPI_IF_bm)){}
 292:	e0 ec       	ldi	r30, 0xC0	; 192
 294:	f8 e0       	ldi	r31, 0x08	; 8
 296:	82 81       	ldd	r24, Z+2	; 0x02
 298:	88 23       	and	r24, r24
 29a:	ec f7       	brge	.-6      	; 0x296 <main+0x66>
		SPIC.DATA = 0b11110000;
 29c:	80 ef       	ldi	r24, 0xF0	; 240
 29e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
		while(!(SPIC.STATUS & SPI_IF_bm)){}
 2a2:	e0 ec       	ldi	r30, 0xC0	; 192
 2a4:	f8 e0       	ldi	r31, 0x08	; 8
 2a6:	82 81       	ldd	r24, Z+2	; 0x02
 2a8:	88 23       	and	r24, r24
 2aa:	ec f7       	brge	.-6      	; 0x2a6 <main+0x76>
 2ac:	22 e2       	ldi	r18, 0x22	; 34
 2ae:	30 e0       	ldi	r19, 0x00	; 0

		for(int i = 0; i < 34; i++){
			SPIC.DATA = 0b00000000;
 2b0:	e0 ec       	ldi	r30, 0xC0	; 192
 2b2:	f8 e0       	ldi	r31, 0x08	; 8
 2b4:	13 82       	std	Z+3, r1	; 0x03
			while(!(SPIC.STATUS & SPI_IF_bm)){}
 2b6:	82 81       	ldd	r24, Z+2	; 0x02
 2b8:	88 23       	and	r24, r24
 2ba:	ec f7       	brge	.-6      	; 0x2b6 <main+0x86>
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	31 09       	sbc	r19, r1
		SPIC.DATA = 0b11111111;
		while(!(SPIC.STATUS & SPI_IF_bm)){}
		SPIC.DATA = 0b11110000;
		while(!(SPIC.STATUS & SPI_IF_bm)){}

		for(int i = 0; i < 34; i++){
 2c0:	c9 f7       	brne	.-14     	; 0x2b4 <main+0x84>
			SPIC.DATA = 0b00000000;
			while(!(SPIC.STATUS & SPI_IF_bm)){}
		}
		_latPort.OUTSET |= 1 << _latPin;
 2c2:	e0 e4       	ldi	r30, 0x40	; 64
 2c4:	f6 e0       	ldi	r31, 0x06	; 6
 2c6:	85 81       	ldd	r24, Z+5	; 0x05
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	85 83       	std	Z+5, r24	; 0x05
		_latPort.OUTCLR |= 1 << _latPin;
 2cc:	86 81       	ldd	r24, Z+6	; 0x06
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	86 83       	std	Z+6, r24	; 0x06


	
	while (1) 
    {
	if(PORTA.OUT == 0){
 2d2:	e0 e0       	ldi	r30, 0x00	; 0
 2d4:	f6 e0       	ldi	r31, 0x06	; 6
 2d6:	84 81       	ldd	r24, Z+4	; 0x04
 2d8:	81 11       	cpse	r24, r1
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <main+0xbe>
		PORTA.OUT+=1;
 2dc:	84 81       	ldd	r24, Z+4	; 0x04
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	83 ef       	ldi	r24, 0xF3	; 243
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0xb6>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0xbc>
 2ec:	00 00       	nop
		_delay_ms(1);
	}
		PORTA.OUT = PORTA.OUT << 1;
 2ee:	84 81       	ldd	r24, Z+4	; 0x04
 2f0:	88 0f       	add	r24, r24
 2f2:	84 83       	std	Z+4, r24	; 0x04
 2f4:	83 ef       	ldi	r24, 0xF3	; 243
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0xc8>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0xce>
 2fe:	00 00       	nop
 300:	ea cf       	rjmp	.-44     	; 0x2d6 <main+0xa6>

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
