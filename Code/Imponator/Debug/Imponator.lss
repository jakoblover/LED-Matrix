
Imponator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003034  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000289a  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006da  00000000  00000000  00005cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000063b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001f90  00000000  00000000  00006418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d0  00000000  00000000  000083a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00008478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  50:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  80:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  84:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  8c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  90:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  94:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  98:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  9c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  fc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 100:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 104:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 108:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 10c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 110:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 114:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 118:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 11c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 120:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 124:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 128:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 12c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 130:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 134:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 138:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 13c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 140:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 144:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 148:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 14c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 150:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 154:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 158:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 15c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 160:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 164:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 168:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 16c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 170:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 174:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 178:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 17c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 180:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 184:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 188:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 18c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 190:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 194:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 198:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 19c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62
 208:	0e 94 18 01 	call	0x230	; 0x230 <main>
 20c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

00000210 <__bad_interrupt>:
 210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <clock_init>:
    }
	
}

void clock_init(){
	OSC.CTRL |= OSC_RC2MEN_bm;
 214:	e0 e5       	ldi	r30, 0x50	; 80
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC2MRDY_bm));
 21e:	81 81       	ldd	r24, Z+1	; 0x01
 220:	80 ff       	sbrs	r24, 0
 222:	fd cf       	rjmp	.-6      	; 0x21e <clock_init+0xa>
	_PROTECTED_WRITE(CLK_CTRL, CLK_SCLKSEL_RC2M_gc);
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	88 ed       	ldi	r24, 0xD8	; 216
 228:	84 bf       	out	0x34, r24	; 52
 22a:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 22e:	08 95       	ret

00000230 <main>:
void clock_init(void);


int main(void)
{
	clock_init();
 230:	0e 94 0a 01 	call	0x214	; 0x214 <clock_init>
	spi_init();
 234:	0e 94 4d 01 	call	0x29a	; 0x29a <spi_init>

	PORTA.DIRSET = 0b11111111; //ROW2
 238:	e0 e0       	ldi	r30, 0x00	; 0
 23a:	f6 e0       	ldi	r31, 0x06	; 6
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0b11111111; //ROW2
 240:	85 83       	std	Z+5, r24	; 0x05
 242:	24 e2       	ldi	r18, 0x24	; 36
 244:	30 e0       	ldi	r19, 0x00	; 0


	
	for(int i = 0; i < 36; i++){
		SPIC.DATA = 0b00101100;
 246:	e0 ec       	ldi	r30, 0xC0	; 192
 248:	f8 e0       	ldi	r31, 0x08	; 8
 24a:	9c e2       	ldi	r25, 0x2C	; 44
 24c:	93 83       	std	Z+3, r25	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm)){}
 24e:	82 81       	ldd	r24, Z+2	; 0x02
 250:	88 23       	and	r24, r24
 252:	ec f7       	brge	.-6      	; 0x24e <main+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	a3 ef       	ldi	r26, 0xF3	; 243
 256:	b1 e0       	ldi	r27, 0x01	; 1
 258:	11 97       	sbiw	r26, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x28>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x2e>
 25e:	00 00       	nop
 260:	21 50       	subi	r18, 0x01	; 1
 262:	31 09       	sbc	r19, r1
	PORTA.DIRSET = 0b11111111; //ROW2
	PORTA.OUTSET = 0b11111111; //ROW2


	
	for(int i = 0; i < 36; i++){
 264:	99 f7       	brne	.-26     	; 0x24c <main+0x1c>
		SPIC.DATA = 0b00101100;
		while(!(SPIC.STATUS & SPI_IF_bm)){}
		_delay_ms(1);
	}
	
	SPI_blankAndLatch();
 266:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_blankAndLatch>


	
	while (1) 
    {
		if(PORTA.OUT == 0){
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f6 e0       	ldi	r31, 0x06	; 6
 26e:	84 81       	ldd	r24, Z+4	; 0x04
 270:	81 11       	cpse	r24, r1
 272:	09 c0       	rjmp	.+18     	; 0x286 <main+0x56>
			PORTA.OUT+=1;
 274:	84 81       	ldd	r24, Z+4	; 0x04
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	84 83       	std	Z+4, r24	; 0x04
 27a:	83 ef       	ldi	r24, 0xF3	; 243
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0x4e>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x54>
 284:	00 00       	nop
			_delay_ms(1);
		}
		PORTA.OUT = PORTA.OUT << 1;
 286:	84 81       	ldd	r24, Z+4	; 0x04
 288:	88 0f       	add	r24, r24
 28a:	84 83       	std	Z+4, r24	; 0x04
 28c:	a3 ef       	ldi	r26, 0xF3	; 243
 28e:	b1 e0       	ldi	r27, 0x01	; 1
 290:	11 97       	sbiw	r26, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x60>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x66>
 296:	00 00       	nop
 298:	ea cf       	rjmp	.-44     	; 0x26e <main+0x3e>

0000029a <spi_init>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "SPI.h"

void spi_init(){
	PORTC.DIRSET |= 1 << 0; //Latch pin for TLC5947
 29a:	e0 e4       	ldi	r30, 0x40	; 64
 29c:	f6 e0       	ldi	r31, 0x06	; 6
 29e:	81 81       	ldd	r24, Z+1	; 0x01
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 1; //BLANK pin for TLC5947
 2a4:	81 81       	ldd	r24, Z+1	; 0x01
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 7; //SCK pin for TLC5947
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 5; //MOSI pin for TLC5947
 2b0:	81 81       	ldd	r24, Z+1	; 0x01
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= 1 << 4; //Slave select
 2b6:	81 81       	ldd	r24, Z+1	; 0x01
 2b8:	80 61       	ori	r24, 0x10	; 16
 2ba:	81 83       	std	Z+1, r24	; 0x01
	//PORTC.DIRSET |= 0b10110011;
	
	PORTC.PIN4CTRL |= PORT_OPC_PULLUP_gc; //Slave select requires a pull-up i guess
 2bc:	84 89       	ldd	r24, Z+20	; 0x14
 2be:	88 61       	ori	r24, 0x18	; 24
 2c0:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.OUTSET |= 1 << 4; //Slave select HIGH. This is to prevent the XMEGA from being reset to slave
 2c2:	85 81       	ldd	r24, Z+5	; 0x05
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR |= 1 << 0; //Set latch pin low
 2c8:	86 81       	ldd	r24, Z+6	; 0x06
 2ca:	81 60       	ori	r24, 0x01	; 1
 2cc:	86 83       	std	Z+6, r24	; 0x06
	
	SPIC.CTRL |= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc; //Enable SPI, select as master, Mode 0 SPI
 2ce:	e0 ec       	ldi	r30, 0xC0	; 192
 2d0:	f8 e0       	ldi	r31, 0x08	; 8
 2d2:	80 81       	ld	r24, Z
 2d4:	80 65       	ori	r24, 0x50	; 80
 2d6:	80 83       	st	Z, r24
	SPIC.INTCTRL |= SPI_INTLVL_OFF_gc; //turn off interrupts. for now.
 2d8:	81 81       	ldd	r24, Z+1	; 0x01
 2da:	81 83       	std	Z+1, r24	; 0x01
 2dc:	08 95       	ret

000002de <SPI_blankAndLatch>:
	
}

void SPI_blankAndLatch(void){
		PORTC.DIRSET |= 1 << 0;
 2de:	e0 e4       	ldi	r30, 0x40	; 64
 2e0:	f6 e0       	ldi	r31, 0x06	; 6
 2e2:	81 81       	ldd	r24, Z+1	; 0x01
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	81 83       	std	Z+1, r24	; 0x01
		PORTC.DIRCLR |= 1 << 0;
 2e8:	82 81       	ldd	r24, Z+2	; 0x02
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	82 83       	std	Z+2, r24	; 0x02
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
